<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SDK_SC_RfidReader</name>
    </assembly>
    <members>
        <member name="T:SDK_SC_RfidReader.DeviceBase.DiscoverDevices">
            <summary>
            Class to search and find device
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DiscoverDevices.Dispose">
            <summary>
            Dispose method
            </summary>       
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DiscoverDevices.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DiscoverDevices.TestSerialPort(System.String,System.String@)">
            <summary>
            Method to test a device on a particular com
            </summary>
            <param name="PortCom">Serial port to tesr</param>
            <param name="serial"> return the serial number found</param>
            <returns>true if a device is present , false otherwise</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DiscoverDevices.sendMessage(System.String)">
            <summary>
            Method to send message on port
            </summary>
            <param name="message">message to send</param>
        </member>
        <member name="T:SDK_SC_RfidReader.Action">
            <summary>
            Enumeration of possible action in ZIP
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.Action.Zip">
            <summary>
            Value for Zip
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.Action.UnZip">
            <summary>
            Value for unzip
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.FileZip._SourceFileName">
            <summary>
            This is a private field that represents
            the full source file path
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.FileZip._DestinationFileName">
            <summary>
            This is a private field that represents
            the full destination file path
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.FileZip.oBuffer">
            <summary>
            This byte array is used to stock both
            The input file contents and out put file
            contents as bytes
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.FileZip.oZipper">
            <summary>
            This is the class responsible of
            zipping and unzipping files
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.FileZip.#ctor">
            <summary>
            This is a default constructor
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.FileZip.#ctor(System.String,System.String,SDK_SC_RfidReader.Action)">
            <summary>
            This is an overloaded constructor
            </summary>
            <param name="SourceFileName">This represents the
            full source file name of the one going to be zipped
            </param>
            <param name="DestinationFileName">This represents the
            full source file name of the one going to be unziped
            </param>
            <param name="action">Choose between zip or unzip mode</param>
        </member>
        <member name="M:SDK_SC_RfidReader.FileZip.CompressFile">
            <summary>
            This is the method responsible for compression, it is marked
            as protected because we use it is called at the constructor
            level when a compression mode is chosen instead of using it directly
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.FileZip.DecompressFile">
            <summary>
            This is the method responsible for compression, it is marked
            as protected because we use it is called at the constructor
            level when a decompression mode is chosen instead of using it directly
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.FileZip.SourceFileName">
            <summary>
            This is the source file full path property
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.FileZip.DestinationFileName">
            <summary>
            This is the destination full path property
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.IRfidReader">
            <summary>
            Interface of rfidReader class.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.SetIRSensorON(System.Boolean)">
            <summary>
            Function to switch on ot off the IR sensor and the movement detection sensor.
            </summary>
            <param name="bStart"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.DiscoverPluggedDevices">
            <summary>
            Method to retriev device plugged
            </summary>
            <returns>List array of serial port valid</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.ConnectReader(System.String)">
            <summary>
            Method to connect a reader to a serial port.
            The result of the connection generate a notification ReaderNotify.RN_Connected if succeed
            or ReaderNotify.RN_FailedToConnect if failed.
            </summary>
            <param name="strCom">string name of the port com to connect</param>
            <returns>true is succeed, false otherwise</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.DisconnectReader">
            <summary>
            Method to disconnect reader to serial port and stop listen thread.
            This Method generate a notification ReaderNotify.RN_Disconnected if succeed.
            </summary>
            <returns>true if succeed, false otherwise</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.RequestScan(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Method to request tag inventory, failed in reader not ready (a scan is active, no connection available)        
            This Method generate a notification ReaderNotify.RN_ScanStarted when scan starts.
            This Method generate a notification ReaderNotify.RN_ScanCompleted when scan is completed.
            This Method generate a notification ReaderNotify.RN_ErrorDuringScan when an error occurs. 
            The error reason is present in readerData.FailureReason.
            If asynchronous event set, this method generate a notification ReaderNotify.RN_TagAdded when new tag found;
            and ReaderNotify.RN_TagRemoved when tag removed from previous state.
            If ResetList is set, only ReaderNotify.RN_TagAdded will be generate.
            If not use the asynchronous event, the reader inventory can be retrieve by ReadScannedTag() at the end of the scan.
            In any case readerData contain list of tag and status of the reader for the this inventory.
            </summary>
            <param name="ResetList">bool to reset the known tag list in board</param>
            <param name="AsynchronousEvent">bool to set asynchronous event flag</param>
            <param name="bUseKR">bool to set KR in  inventory mode . Must be true by default</param>
            <param name="bUnlockTagAllAxis">bool to unlock tag at start scan . Must be true by default </param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.RequestScan(System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Same method as above but with a switch relay board control on one from 8
            </summary>
            <param name="ChannelNumber"></param>
            <param name="ResetList"></param>
            <param name="AsynchronousEvent"></param>
            <param name="bUseKR"></param>
            <param name="bUnlockTagAllAxis"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.RequestScan3D(System.Boolean,System.Boolean)">
            <summary>
            Method to request tag inventory, failed in reader not ready (a scan is active, no connection available)    
            This Mode impose to use reset list, the board must be cleared known tags each time the relay switch
            This Mode impose also to be in asynchonous Mode
            This Method generates a notification ReaderNotify.RN_ScanStarted when scan starts.
            This Method generates a notification ReaderNotify.RN_ScanCompleted when scan is completed.
            This Method generates a notification ReaderNotify.RN_ErrorDuringScan when an error occurs. 
            The error reason is present in readerData.FailureReason.
            This method generates a notification ReaderNotify.RN_TagAdded when new tag found;        
            ReaderData contains list of tag and status of the reader for the this inventory.
            </summary>
            <param name="bUseKR">bool to set KR in  inventory mode . Must be true by default</param>
            <param name="bUnlockTagAllAxis">bool to set to unlock all tags . Must be true by default, can be put to false when door not open more than 5 min</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.RequestEndScan">
            <summary>
            Method to request end of the scanning thread.
            This Method generate a notification ReaderNotify.RN_ScanCancelByHost if succeed.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.ReadScannedTag">
            <summary>
            Method to retrieve list of stored tag in reader board.
            Tag list are present in readerData.strListTag list and number of tag are in  readerData.nbTagScan
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.FlashFirmware(System.String)">
            <summary>
            Method to flash the firmware.
            Use this method with caution with only recommendation of spacecode.
            A bad use could result of a non function of the reader.
            </summary>
            <param name="hexFileNamePath">String to the path of the firmware file</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.GetThresholdValue">
            <summary>
            Method to retrieve correlation threshold.
            This value represent the level above which a correaltion is assume done by the tag.
            </summary>
            <returns>value of the threshold</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.SetThresholdValue(System.Byte)">
            <summary>
            Method to set and store threshold value.
            This value must be between 5 and 200.
            The value  must be greater than MaximumCorrelationWhithoutResponse to not detect noise and below
            MinimumCorrelationWithResponse to aasume to detect all the tag.
            </summary>
            <param name="Threshold">threshold value to set</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.FindThreshold">
            <summary>
            Method to request a correlation sampling process to measure noise level.
            This Method generate a notification ReaderNotify.RN_ThresholdMaxNoise when scan completed.
            The result are store in datareader class.
            </summary>
            <returns>true is order successively send.</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.SendSwitchCommand(System.Boolean,System.Byte,System.Boolean)">
            <summary>
            Method to select one axis in the reader (for debug purpose only)
            </summary>
            <param name="bSet">True to set the relay false otherwise</param>
            <param name="RelaisNumber">Relay to drive for 1 to 8</param>
            <param name="ResetAllBeforSet">true to reset all relay before </param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.SetLightPower(System.UInt16)">
            <summary>
            Function to set the light value
            </summary>
            <param name="power">Scale the light form 0 to 300</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.OpenDoor">
            <summary>
            Function to open the door
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.CloseDoor">
            <summary>
            Function to close the Door
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IRfidReader.SetIpAlarm(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to set the alarm on IP device
            </summary>
            <param name="host">name or IP of the alarm device</param>
            <param name="bStrobeOn">true to set the stoble light on</param>
            <param name="bHeavySoundOn">true to set the heavy alarm on 114dB</param>
            <param name="bLoudSoundOn">true to set the light alarm on 90dB</param>
            <returns></returns>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IRfidReader.SerialNumber">
            <summary>
            Property to get SerialNumber of the board
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IRfidReader.IsInScan">
            <summary>
            Property to know if the board is in scan process
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IRfidReader.FirmwareVersion">
            <summary>
            property to retrieve software version format x.xx
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IRfidReader.HardwareVersion">
            <summary>
            property to retrieve hardware version format x.xx
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IRfidReader.IsConnected">
            <summary>
            Property to retrieve the connection status.
            </summary>
            <value>True is connected, false if not connected.</value>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IRfidReader.StrCom">
            <summary>
            Property to set or get the serial port name "ex COM1".
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IRfidReader.ScanTimeout">
            <summary>
            Property to set scan timeout in millisecond.This time while stop the scan process thread and request a end of 
            scanning.
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IRfidReader.Door_Status">
            <summary>
            Property to retrieve the Door Status State (ie close or open)
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IRfidReader.Lock_Status">
            <summary>
             Property to retrieve the Lock Status State (ie close or open)
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IRfidReader.ListOfSerialPluggedDevices">
            <summary>
            Arry content the Serial plugged device after a request to the Discover device function
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.NotifyHandlerDelegate">
            <summary>
            Spacecode RFID reader notify event to inform host.
            This is a delegate function to define the notify function.
            </summary>
            <param name="sender">Class sender of the event</param>
            <param name="arg">Class rfidReaderArgs that contains event to notify </param>
        </member>
        <member name="T:SDK_SC_RfidReader.ShowMessageDelegate">
            <summary>
            Delegate for debug message in textbox
            </summary>
            <param name="device"></param>
            <param name="message"></param>
            <param name="modifier"></param>
        </member>
        <member name="T:SDK_SC_RfidReader.RfidReader">
            <summary>
            Main reader class for driving Spacecode rfid board.
            Class define method to send High level command to drive the RFID board.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.RfidReader.ThresholdBackup">
            <summary>
            Threshold backup value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.RfidReader.FlashThread">
            <summary>
            Variable contenant l'objet Thread pendant flash
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.GetCheckKZout">
            <summary>
            Property to get end scan statut (=4 if all axis well ended)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.GetConfirmationStatus">
            <summary>
            Property to retrieve statut of a confirmation tag request.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SDK_SC_RfidReader.RfidReader.ReaderData">
            <summary>
            General Reader data class variable.
            This class contain all the reader information and result.
            Each time a notification occurs, the variable in relation is uptate in this structure.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.#ctor(System.Boolean)">
            <summary>
            Constructor of rfidReaderClass.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.Finalize">
            <summary>
            Destructor of rfidReader Class.
            Launch a disconnect function to end the reception thread.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.Dispose">
            <summary>
            Function to dispose the reader object.
            Have to be launch before quit application to well remove the USB Watcher
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.GetThresholdValue">
            <summary>
            Method to retrieve correlation threshold.
            This value represent the level above which a correaltion is assume done by the tag.
            </summary>
            <returns>value of the threshold</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.getSupply12V">
            <summary>
            Method to retrieve value of the 12V of the board
            14v 1023 - 13.5v 1023 - 13v 1023 - 12.5 1023   - 12 992 - 11.5 951 11 911
            </summary>
            <returns>A value of the ADC 12v</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.SetThresholdValue(System.Byte)">
            <summary>
            Method to set and store threshold value.
            This value must be between 5 and 200.
            The value  must be greater than MaximumCorrelationWhithoutResponse to not detect noise and below
            MinimumCorrelationWithResponse to aasume to detect all the tag.
            </summary>
            <param name="Threshold">threshold value to set</param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.FlashFirmware(System.String)">
            <summary>
            Method to flash the firmware.
            Use this method with caution with only recommendation of spacecode.
            A bad use could result of a non function of the reader.
            </summary>
            <param name="hexFileNamePath">String to the path of the firmware file</param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.flashFirmwareThread(System.Object)">
            <summary>
            Thread to flash firmware
            </summary>
            <param name="hexLoaderObject"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.DiscoverPluggedDevices">
            <summary>
            Method to retrieve serial port where a device is plugged
            </summary>
            <returns>Array of valid serial port</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.ConnectReader(System.String)">
            <summary>
            Method to connect a reader to a serial port.
            The result of the connection generate a notification ReaderNotify.RN_Connected if succeed
            or ReaderNotify.RN_FailedToConnect if failed.
            </summary>
            <param name="strPortCom">string name of the port com to connect</param>
            <returns>true is succeed, false otherwise</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.DisconnectReader">
            <summary>
            Method to disconnect reader to serial port and stop listen thread.
            This Method generate a notification ReaderNotify.RN_Disconnected if succeed.
            </summary>
            <returns>true if succeed, false otherwise</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.RequestEndScan">
            <summary>
            Method to request end of the scanning thread.
            This Method generate a notification ReaderNotify.RN_ScanCancelByHost if succeed.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.RequestScan(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Method to request tag inventory, failed in reader not ready (a scan is active, no connection available)        
            This Method generate a notification ReaderNotify.RN_ScanStarted when scan starts.
            This Method generate a notification ReaderNotify.RN_ScanCompleted when scan is completed.
            This Method generate a notification ReaderNotify.RN_ErrorDuringScan when an error occurs. 
            The error reason is present in readerData.FailureReason.
            If asynchronous event set, this method generate a notification ReaderNotify.RN_TagAdded when new tag found;
            and ReaderNotify.RN_TagRemoved when tag removed from previous state.
            If ResetList is set, only ReaderNotify.RN_TagAdded will be generate.
            If not use the asynchronous event, the reader inventory can be retrieve by ReadScannedTag() at the end of the scan.
            In any case readerData contain list of tag and status of the reader for the this inventory.
            </summary>
            <param name="ResetList">bool to reset the known tag list in board</param>
            <param name="AsynchronousEvent">bool to set asynchronous event flag</param>
            <param name="bUseKR">bool to set KR in  inventory mode . Must be true by default</param>
            <param name="bUnlockTagAllAxis">bool to set reverse orientation inventory . Must be true by default </param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.RequestScan(System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Same as  RequestScan but with choose of one channel.
            </summary>
            <param name="ChannelNumber">byte of the channel number to scan</param>
            <param name="ResetList"></param>
            <param name="AsynchronousEvent"></param>
            <param name="bUseKR"></param>
            <param name="bUnlockTagAllAxis"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.RequestScan3D(System.Boolean,System.Boolean)">
            <summary>
            Method to request tag inventory, failed in reader not ready (a scan is active, no connection available)    
            This Mode impose to use reset list, the board must be cleared known tags each time the relay switch
            This Mode impose also to be in asynchonous Mode
            This Method generates a notification ReaderNotify.RN_ScanStarted when scan starts.
            This Method generates a notification ReaderNotify.RN_ScanCompleted when scan is completed.
            This Method generates a notification ReaderNotify.RN_ErrorDuringScan when an error occurs. 
            The error reason is present in readerData.FailureReason.
            This method generates a notification ReaderNotify.RN_TagAdded when new tag found;        
            ReaderData contains list of tag and status of the reader for the this inventory.
            </summary>
            <param name="bUseKR">bool to set KR in  inventory mode . Must be true by default</param>
            <param name="bUnlockTagAllAxis">bool to set to unlock all tags . Must be true by default, can be put to false when door not open more than 5 min</param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.RequestScan3D(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Method to request tag inventory, failed in reader not ready (a scan is active, no connection available)    
            This Mode impose to use reset list, the board must be cleared known tags each time the relay switch
            This Mode impose also to be in asynchonous Mode
            This Method generates a notification ReaderNotify.RN_ScanStarted when scan starts.
            This Method generates a notification ReaderNotify.RN_ScanCompleted when scan is completed.
            This Method generates a notification ReaderNotify.RN_ErrorDuringScan when an error occurs. 
            The error reason is present in readerData.FailureReason.
            This method generates a notification ReaderNotify.RN_TagAdded when new tag found;        
            ReaderData contains list of tag and status of the reader for the this inventory.
            </summary>
            <param name="bUseKR">bool to set KR in  inventory mode . Must be true by default</param>
            <param name="bUnlockTagAllAxis">bool to set to unlock all tags . Must be true by default, can be put to false when door not open more than 5 min</param>
            <param name="UseMutex">Bool to scan simultaneously or not the devices</param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.getStatus(System.String@)">
            <summary>
            Get Statut from rfid board
            </summary>
            <param name="strStatut"></param>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.ReadScannedTag">
            <summary>
            Method to retrieve list of stored tag in reader board.
            Tag list are present in readerData.strListTag list and number of tag are in  readerData.nbTagScan
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.SendSwitchCommand(System.Boolean,System.Byte,System.Boolean)">
            <summary>
            Method to control switch board through RS485
            </summary>
            <param name="bSet">Set or clear relay</param>
            <param name="RelaisNumber">relais number to control (1 to 8) ; 9 for all</param>
            <param name="ResetAllBeforSet">if true clear all Relay befor set one.</param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.SetLightPower(System.UInt16)">
            <summary>
            Method to set Light power
            </summary>
            <param name="power">power value to set (0-300)</param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.SetIRSensorON(System.Boolean)">
            <summary>
            Method to switch on IR sensor
            </summary>
            <param name="bStart"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.SetIpAlarm(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to set alarm and strob
            
            </summary>
            <param name="hostname"></param>
            <param name="bStrobeOn"></param>
            <param name="bHeavySoundOn"></param>
            <param name="bLoudSoundOn"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.CalibrateDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.FindThresholdDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.ConversionDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.TagSetDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.DoorAndLightDiag">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.ReceiveAsynchronousEvent(SDK_SC_RfidReader.DeviceBase.AsyncEventMessage)">
            <summary>
            Main Asynchronous receive function to handle event.
            </summary>
            <param name="asyncEventMessage">the asynchronous message involved</param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.showOutbound(SDK_SC_RfidReader.DeviceBase.IDeviceRfidBoard,System.String,System.String)">
            <summary>
            Delegate function to display comunication message if textbox declared
            </summary>
            <param name="device">device to display</param>
            <param name="message">message to dispaly</param>
            <param name="modifier">modifier to parse message type  </param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.AddMessage(System.UInt32,System.String,System.String,System.DateTime)">
            <summary>
            Method to add message to logs
            </summary>
            <param name="serialNumber">device serial number</param>
            <param name="message">message to display</param>
            <param name="direction">modifier to parse message</param>
            <param name="dt"> Date de demande de log</param>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.IsColumnExists(System.Data.SqlClient.SqlDataReader,System.String)">
            <summary>
            Test presence  column in DB
            </summary>
            <param name="dataReader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.FindThreshold">
            <summary>
            Method to request a correlation sampling process to measure noise level.
            This Method generate a notification ReaderNotify.RN_ThresholdMaxNoise when scan completed.
            The result are store in datareader class.
            </summary>
            <returns>true is order successively send.</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.OpenDoor">
            <summary>
            Funtion to unlock the latch mechanism
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.OpenDoorMaster">
            <summary>
            Method to open Master Door in SAS
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.OpenDoorSlave">
            <summary>
            Methode to open slave door in SAS
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.CloseDoor">
            <summary>
            Function to lock the latch mechanism
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.CloseDoorMaster">
            <summary>
            Method to close master lock
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.CloseDoorSlave">
            <summary>
            Method to close slave lock in SAS
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.RfidReader.SetWaitForTag(System.Boolean)">
            <summary>
            Method to put the wait tag mode on
            </summary>
            <param name="bOnOff"></param>
            <returns></returns>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.LightValue">
            <summary>
            internal light value
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.Door_Status">
            <summary>
            door status
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.Lock_Status">
            <summary>
            lock status
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.DebugReader">
            <summary>
            Property to get and set debug window activation
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.EnabledLog">
            <summary>
            Property to enable or not the log 
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.SendLogMail">
            <summary>
            Property to enable to send log by mail as the default receiver
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.ListOfSerialPluggedDevices">
            <summary>
            Array List of the devices in format "serial;portcom"
            </summary>
        </member>
        <member name="E:SDK_SC_RfidReader.RfidReader.NotifyEvent">
            <summary>
            Variable function for notify event.
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.SerialNumber">
            <summary>
            Property to retrieve serail number of the board
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.IsConnected">
            <summary>
            Property to retrieve the connection status.
            </summary>
            <value>True is connected, false if not connected.</value>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.IsInScan">
            <summary>
            Tells if device is currently performing a scan
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.IsInWaitTagMode">
            <summary>
            Tells if device is currently in Wait mode
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.ScanTimeout">
            <summary>
            Property to set scan timeout in millisecond.This time while stop the scan process thread and request a end of 
            scanning.
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.StrCom">
            <summary>
            Property to set or get the serial port name "ex COM1".
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.ErrBoard">
            <summary>
            Property to get and set errBoard class
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.DeviceBoard">
            <summary>
            
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.FirmwareVersion">
            <summary>
            Property to get firmware version
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.RfidReader.HardwareVersion">
            <summary>
            Property to get Hardware version
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.ThreadArgs">
            <summary>
            Class to exchange data with scan thread.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.ReaderData">
            <summary>
            Shared reader data
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.EventScanStart">
            <summary>
            Event to notify start of scan
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.EventScanEnd">
            <summary>
            Event to notify end of scan
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.EventConfirmation">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.BUseKR">
            <summary>
            Bool to notify Dynamic inventory mode
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.BUnlockTagAllAxis">
            <summary>
            Bool to notify dual field scan
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.AsynchronousEvent">
            <summary>
            Bool to notify asynchronous info during scan
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.ResetList">
            <summary>
            Bool to notify to reset list
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.DeviceBoard">
            <summary>
            Shared device board class
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.ScanTimeout">
            <summary>
            int to fix timeout in  ms of the inventory
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.SerialNumber">
            <summary>
            String of the serial Nummber of the board
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.IsInScan">
            <summary>
            Boolean to true when reader is in scan, false otherwise
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.LastScanSerial">
            <summary>
            Array  of last scan tag on all axis
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ThreadArgs.UseMutex">
            <summary>
            Boolean to block the scan simultaneously from many devices
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.ThreadArgs.#ctor(SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SDK_SC_RfidReader.ReaderData,System.Threading.EventWaitHandle,System.Threading.EventWaitHandle,System.Threading.EventWaitHandle,SDK_SC_RfidReader.NotifyHandlerDelegate,System.Int32,System.String,System.Boolean,System.Collections.ArrayList,SDK_SC_RfidReader.ThreadArgs.GetConfirmationDelegate,SDK_SC_RfidReader.ThreadArgs.GetCheckKZOutDelegate,SDK_SC_RfidReader.ShowMessageDelegate,System.Boolean)">
            <summary>
            main constructor
            </summary>
            <param name="deviceBoard"></param>
            <param name="bUseKR"></param>
            <param name="bUnlockTagAllAxis"></param>
            <param name="asynchronousEvent"></param>
            <param name="resetList"></param>
            <param name="readerData"></param>
            <param name="eventScanStart"></param>
            <param name="eventScanEnd"></param>
            <param name="eventConfirmation"></param>
            <param name="notifyEvent"></param>
            <param name="scanTimeout"></param>
            <param name="serialNumber"></param>
            <param name="isInScan"></param>
            <param name="lastScanSerial"></param>
            <param name="getConfirmationDelegate"></param>
            <param name="getCheckKZOutDelegate"></param>
            <param name="showOutbound"></param>
            <param name="useMutex"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.ThreadArgs.Run">
            <summary>
            Main run function to scan Tags in a threads
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.ThreadArgs.Run3D">
            <summary>
            Main run function to scan Tags in 3D in a threads
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.ThreadArgs.RunAutoscan">
            <summary>
            Function to preform an autoscan
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.ThreadArgs.SendSwitchCommand(System.Boolean,System.Byte,System.Boolean)">
            <summary>
            Method to control switch board through RS485
            </summary>
            <param name="bSet">Set or clear relay</param>
            <param name="RelaisNumber">relais number to control (1 to 8) ; 9 for all</param>
            <param name="ResetAllBeforSet">if true clear all Relay befor set one.</param>
        </member>
        <member name="E:SDK_SC_RfidReader.ThreadArgs.NotifyEvent">
            <summary>
            Delegate to notify event
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.ThreadArgs.GetConfirmationDelegate">
            <summary>
            Delegate to recover confirmation statut value
            </summary>
            <returns>byte of the confirmation value</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.ThreadArgs.GetCheckKZOutDelegate">
            <summary>
             Delegate to recover end scan well ended value
            </summary>
            <returns>byte of the number of axis well ended</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.CRC">
            <summary>
            Class CRC : Contain varaible and method for compute an verify CRC in a message
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CRC.CrcLutHi">
            <summary>
            Variable  static byte[] : High Word value look-up table
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CRC.CrcLutLo">
            <summary>
            Variable  static byte[] : Low Word value look-up table
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CRC.ucCrcHi">
            <summary>
            Variable  int : High Word of CRC compute
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CRC.ucCrcLo">
            <summary>
            Variable  int : Low Word of CRC compute
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.CRC.reset">
            <summary>
            Method to reset High and Low word of CRC result.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.CRC.addBuffer(System.String)">
            <summary>
            Method to add a message in the buffer and compute CRC
            </summary>
            <param name="message">Message to add in a string format.</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.CRC.addBuffer(System.Byte[])">
            <summary>
            Method to add a message in the buffer and compute CRC
            </summary>
            <param name="buffer">Message to add in array of byte format</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.CRC.calculatePbCRC(System.String)">
            <summary>
            Method calculatePbCRC :  Calculate the CRC for the specified message.
            </summary>
            <param name="message">Message to compute</param>
            <returns>The CRC result in an integer</returns>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.CRC.crc">
             <summary>
             Property to retrieve CRC Value
             </summary>
            <value>Message stores the CRC as big endian, so swap the result bytes.</value>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.DoorValue">
            <summary>
             Enumeration of each response value possible for a request of starting a scan.
            </summary>
            
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DoorValue.DV_Master">
            <summary>
            Value for door master
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DoorValue.DV_Slave">
            <summary>
            Value for Door Slave
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.RespScan">
            <summary>
            Enumeration of Scan resonse
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RespScan.RS_ScanSucceed">
            <summary>
             Value RS_ScanSucceed if scan ending correctly
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RespScan.RS_FailedToConnect">
            <summary>
             Value RS_FailedToConnect if no connection are valid or not connection are found
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RespScan.RS_FailedToStartScan">
            <summary>
             Value RS_FailedToStartScan occurs when bad voltage detect, on the board, board not ready,
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RespScan.RS_FinishScanTimeOut">
            <summary>
            Value RS_FinishScanTimeOut occurs when time to inventory is too long.This time is define in the firmware of the board
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RespScan.RS_ErrorDuringScan">
            <summary>
            Values  RS_ErrorReadUID occurs when a Tag present in the field send recursively a bad uid number
            This value mentionned that the scan cannot finish normally due to a tag error 
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RespScan.RS_ReaderReady">
            <summary>
            Value to enable next reader action
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RespScan.RS_ReaderNotReady">
            <summary>
            Value to disable reader, can be test to see if reader available for next action
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMessageType">
            <summary>
            Enumeration of the message type, As only one channel is possible this value is unique.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMessageType.ASYNC_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMessageType.ASYNC_MSG_FROM_PB">
            <summary>
            Value to define a classic asynchronous event on the communication channel
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.CommandType">
            <summary>
            Enumeration of all the avalaible command.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_AsyncEvent">
            <summary>
            EX command for all the command that are asynchronous 
            response of startScan, tagAdded, TagRemove,EndScan
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_HelloWorld">
            <summary>
            HW command for discovering new board
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_RfidCommand">
            <summary>
            BD command use for send all rfid Process , search for noise, adjust noise threshold
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_RequestTagCheck">
            <summary>
            RC command to request a full inventory
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_RequestNextTag">
            <summary>
            RT command for recovery in non asynchronous operation , uid of the next stored tag
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBMCD_GetTagFailure">
            <summary>
            TF command for recovery the failure error when a tag error is detected.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_GetStatus">
            <summary>
            ST command for recover board State ans Status.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_Control">
            <summary>
            Request stop scan
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_BackDoor">
            <summary>
            Request Back door to diagnostic functionality.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_DrawerLock">
            <summary>
            Request for lock the door / drawer
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_DrawerUnlock">
            <summary>
            REquest to unlock door /drawer
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.CommandType.PBCMD_DrawerSetLight">
            <summary>
            REquest to set Power of the light
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.MessageIdType">
            <summary>
            Enumeration of all the kind of command.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.MessageIdType.PBMID_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.MessageIdType.PBMID_CommandMessage">
            <summary>
            Value  PBMID_CommandMessage for all command message with a response structure define
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.MessageIdType.PBMID_Acknowledge">
            <summary>
            value PBMID_Acknowledge for all messages which return a Acknowlegment.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.MessageIdType.PBMID_Completion">
            <summary>
            value PBMID_Completion  for all messages which return a Completion
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.DeviceTypeMajorType">
            <summary>
            Enumeration of all the Different Type of Device.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceTypeMajorType.DEVICE_UNKNOWN">
            <summary>
            Value when device Unknow
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceTypeMajorType.DEVICE_RFID_DIAMOND_SMART_BOX">
            <summary>
            Value for board in Diamond reader 1 module
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceTypeMajorType.DEVICE_RFID_JEWELLERY_CABINET">
            <summary>
            Value for board in Jewellery reader 1 module
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceTypeMajorType.DEVICE_RFID_MEDICAL_CABINET">
            <summary>
            Value for board in Diamond reader 2 modules
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceTypeMajorType.DEVICE_RFID_DIAMOND_SMART_BOX_V2">
            <summary>
            Value for Narco Box
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceTypeMajorType.DEVICE_RFID_MONO_AXE_READER">
            <summary>
            Value for Mono_Axe
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceTypeMajorType.DEVICE_RFID_FLAT_3D_SHELVES">
            <summary>
            Value for 3D shelves 55x65cm
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceTypeMajorType.DEVICE_RFID_DIAMOND_SAS">
            <summary>
            Value 
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.DeviceTypeMinorType">
            <summary>
            Enumeration of Minor type , Declare for future use.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceTypeMinorType.DT_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceTypeMinorType.DT_RfidDeviceTypeMinor">
            <summary>
            Value for Rfid device
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.AsyncEventType">
            <summary>
            Enumeration of all Asynchronous event.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_DrawerOpened">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_DrawerClosed">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_ErrorAsync">
            <summary>
            Value unknown AsyncEvent
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_DeviceResetAbnormally">
            <summary>
            Value : 0x3B :  Unexpected device reset, e.g. watchdog reset.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_RfidScanStateChanged">
            <summary>
            Value : 0x3C :  Scan started, finished, or was canceled. see PBAE_RfidScanStateChanged.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_TagAddedR8">
            <summary>
            Value 0xBD :  Back Door information response.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_PowerOff">
            <summary>
            Value 0xFF : power is cut or usb cable is removed
            </summary>  
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_PowerOn">
            <summary>
            Value 0xEE : power is ON
            </summary> 
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_DoorClosed">
            <summary>
            Value 0x01 : DoorClosed
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_DoorOpened">
            <summary>
            Value 0x00 : Door is open
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_AlarmInfra">
            <summary>
            Value Ox40 if infra red event
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.AsyncEventType.PBET_AlarmMove">
            <summary>
            Value Ox41 if Move event
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.ResponseCodeType">
            <summary>
            Enumeration of all Response Code possible.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResponseCodeType.PBRC_SUCCESS">
            <summary>
            Value  PBRC_SUCCESS :  operation was successful
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResponseCodeType.PBRC_FAILURE">
            <summary>
            Value PBRC_FAILURE :  general failure
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResponseCodeType.PBRC_TIMEOUT">
            <summary>
            Value  PBRC_TIMEOUT : general timeout
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResponseCodeType.PBRC_ILLEGAL_VALUE">
            <summary>
            Value PBRC_ILLEGAL_VALUE :  illegal value for a parameter was given
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResponseCodeType.PBRC_ILLEGAL_NUM_ARGS">
            <summary>
            Value PBRC_ILLEGAL_NUM_ARGS :  wrong number of arguments
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResponseCodeType.PBRC_BOOTLOAD_MODE">
            <summary>
            Value PBRC_BOOTLOAD_MODE : Device in BootLoader mode.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.SystemStatusFlags">
            <summary>
            Enumeration used for systemStatus field for various response messages.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SystemStatusFlags.SSF_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SystemStatusFlags.SSF_12VoltsFailure">
            <summary>
            Value  SSF_12VoltsFailure : Set when 12V supply on board is faulty.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SystemStatusFlags.SSF_AntennaNotConnected">
            <summary>
            Value SSF_AntennaNotConnected : Set when antenna is not connected.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SystemStatusFlags.SSF_5VoltsFailure">
            <summary>
            Value SSF_5VoltsFailure : Set when 5V supply on board is faulty.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.ScanStatusFlags">
            <summary>
            Enumeration used for scanStatus field for various response messages.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusFlags.SSF_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusFlags.SSF_ScanningTagsNow">
            <summary>
            Value SSF_ScanningTagsNow : Board in scan process.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusFlags.SSF_TagListHasChanged">
            <summary>
            Value  SSF_TagListHasChanged : Stored list has changed.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusFlags.SSF_TagScanWasCanceled">
            <summary>
            Value :  SSF_TagScanWasCanceled : Scan canceled by the sender.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusFlags.SSF_TagScanRequired">
            <summary>
            Value SSF_TagScanRequired :  A tag scan is required because power-up or door was opened.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusFlags.SSF_TooManyTagsDetected">
            <summary>
            Value SSF_TooManyTagsDetected : The number of tags exceeds the firmware limit.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.ControlModeFlags">
            <summary>
            Enumeration for statistic message.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ControlModeFlags.CMF_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ControlModeFlags.CMF_EnableStatsAsyncEvent">
            <summary>
            Value CMF_EnableStatsAsyncEvent : Enable asynchronous message on statistics change.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.ControlControlFlags">
            <summary>
            Enumeration for Control scan.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ControlControlFlags.CCF_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ControlControlFlags.CCF_StopScan">
            <summary>
            Value  CCF_StopScan : Set to abort current RFID scan.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.TagScanModeFlags">
            <summary>
            Enumeration for control the behaviour of the scan.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagScanModeFlags.TSMF_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagScanModeFlags.TSMF_ClearTagListHasChangedFlag">
            <summary>
            Value TSMF_ClearTagListHasChangedFlag :  If set, clear the Tag-List-Has-Changed flag.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagScanModeFlags.TSMF_SendAsyncMessages">
            <summary>
            Value TSMF_SendAsyncMessages : If set, send asynchronous events for tag changes.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagScanModeFlags.TSMF_UnlockTagAllAxis">
            <summary>
            Value TSMF_UnlockTagAllAxis :  If set, perform Reverse inventory.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagScanModeFlags.TSMF_UseKR">
            <summary>
            Value TSMF_UseKR : If set , perform san with multiple field and multiple synchronization time
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.TagInfoFlags">
            <summary>
            Enumeration  used for PbRspRfidGetNextTag.tagInfo.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagInfoFlags.TIF_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagInfoFlags.TIF_ReachedEndOfTagList">
            <summary>
            Value TIF_ReachedEndOfTagList : Indicates end of tag list reached. If scan pending, try again.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.ScanStatusType">
            <summary>
            Enumeration used for PBAE_RfidScanStateChanged.scanStatus.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusType.SS_TagScanStarted">
            <summary>
            Value  SS_TagScanStarted :  tag scan has begun.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusType.SS_TagScanCompleted">
            <summary>
            Value SS_TagScanCompleted :  tag scan has completed successfully.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusType.SS_TagScanCanceledByHost">
            <summary>
            Value SS_TagScanCanceledByHost : scan canceled by host request before completion.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusType.SS_TagScanCanceledByDoorOpen">
            <summary>
            Value SS_TagScanCanceledByDoorOpen : scan canceled before completion due to door open.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusType.SS_TagScanFailedByUnrecoverableError">
            <summary>
            Value SS_TagScanFailedByUnrecoverableError :  scan aborted due to unrecoverable errors.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusType.SS_TagScanSendPourcent">
            <summary>
            Value SS_TagScanSendPourcent : Send notify % during scan
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ScanStatusType.SS_TagConfirmation">
            <summary>
            Value SS_TagConfirmation : Send notify result of confirmation
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.UnrecoverableErrorType">
            <summary>
            Enumeration used for PBAE_RfidScanStateChanged.info when scanStatus is SS_TagScanFailedByUnrecoverableError.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.UnrecoverableErrorType.UE_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.UnrecoverableErrorType.UE_ExcessiveNoise">
            <summary>
            Value UE_ExcessiveNoise :  Too much noise in tag response; possibly RF interference.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.UnrecoverableErrorType.UE_12VPowerSupply">
            <summary>
            Value UE_12VPowerSupply : 12V power supply has failed.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.UnrecoverableErrorType.UE_5VPowerSupply">
            <summary>
            Value UE_5VPowerSupply :  5V power supply has failed.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.UnrecoverableErrorType.UE_AntennaRemoved">
            <summary>
            Value UE_AntennaRemoved :  Antenna has been removed.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.UnrecoverableErrorType.UE_PersistentFailures">
            <summary>
            Value UE_PersistentFailures :  Tag scan continues to fail, with no recognized reason.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.UnrecoverableErrorType.UE_BrokenTagLock">
            <summary>
            Value UE_BrokenTagLock :  A tag consistently ignored its lock-tags command.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.SetAntennaPolarityAndPowerType">
            <summary>
            Enumeration  used for Tag Tester.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SetAntennaPolarityAndPowerType.SAPP_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SetAntennaPolarityAndPowerType.SAPP_EnableFeature">
            <summary>
            Value SAPP_EnableFeature :  Set to enable feature, else other bits ignored.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SetAntennaPolarityAndPowerType.SAPP_AntennaPolarityReversed">
            <summary>
            Value  SAPP_AntennaPolarityReversed :  Set to reverse antenna polarity, else normal polarity.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SetAntennaPolarityAndPowerType.SAPP_SelectHighPower">
            <summary>
            Value SAPP_SelectHighPower : Set to select >12V for drive board; clear to select 12V.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PresenceTestFlagsType">
            <summary>
             Enumeration  used for Tag Tester.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PresenceTestFlagsType.PTF_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PresenceTestFlagsType.PTF_EnableTest">
            <summary>
            Value PTF_EnableTest : Set to enable feature, else other bits ignored.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PresenceTestFlagsType.PTF_GetPhaseShift">
            <summary>
            Value PTF_GetPhaseShift : Set to calculate and return phase shift.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.ResetReasonType">
            <summary>
            Enumeration for PBAE_DeviceResetAbnormally.resetReason.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResetReasonType.RR_FirmwareReset">
            <summary>
            Value RR_FirmwareReset : The device was reset by firmware request.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResetReasonType.RR_PowerOn">
            <summary>
            Value RR_PowerOn : The device has been powered on.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResetReasonType.RR_BrownOut">
            <summary>
            Value RR_BrownOut : A brown-out reset has occurred.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResetReasonType.RR_MasterClear">
            <summary>
            Value RR_MasterClear : Reset via the /MCLR processor pin.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResetReasonType.RR_Watchdog">
            <summary>
            Value RR_Watchdog : A watchdog timeout reset has occurred.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.ResetReasonType.RR_IllegalOpcodeOrAddressMode">
            <summary>
            Value RR_IllegalOpcodeOrAddressMode :  An illegal opcode or an illegal address mode caused reset.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.TagScanCompleteInfoFlagsType">
            <summary>
            Enumeration used for PBAE_RfidScanStateChanged.info when scanStatus is SS_TagScanCompleted.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagScanCompleteInfoFlagsType.TSCF_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagScanCompleteInfoFlagsType.TSCF_ChangesDetected">
            <summary>
            Value TSCF_ChangesDetected :  Changes in the tag list were detected.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagScanCompleteInfoFlagsType.TSCF_TooManyTags">
            <summary>
            Value TSCF : _TooManyTags : Too many tags were detected.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.TagFailureEnumType">
            <summary>
            Enumeration used for PbRspRfidGetTagFailure.failureType.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagFailureEnumType.TFFT_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagFailureEnumType.TFFT_MissingDigit">
            <summary>
            Value TFFT_MissingDigit : A digit is missing in the Tag Code.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagFailureEnumType.TFFT_ChecksumFailure">
            <summary>
            Value TFFT_ChecksumFailure : The Uid hasn't a valid CRC
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.RfidCommandType">
            <summary>
            Enumeration user for CommandType.PBCMD_rfidCommand.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_Calibrate">
            <summary>
            Value RBDC_Calibrate : Control calibration for the RFID antenna.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_TagPresenceTest">
            <summary>
            Value RBDC_TagPresenceTest : Do a tag-presence test.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SampleCorrelation">
            <summary>
            Value RBDC_SampleCorrelation : Sample a series of correlation values.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_ReadDigitTest">
            <summary>
            Value RBDC_ReadDigitTest : Do a read-digit test.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_NoModuNoiseTest">
            <summary>
            Value RBDC_NoModuNoiseTest : Do a no-modulation noise test.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_EnableCorrelationEvent">
            <summary>
            Value RBDC_EnableCorrelationEvent : Enable an asynchronous event to report correlation value.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_ResetRfidStatistics">
            <summary>
            Value RBDC_ResetRfidStatistics : Clear all fields in the RFID statististics structure.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_ResetCommunicationStatistics">
            <summary>
            Value  Clear all fields in the Communication statististics structure.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetCorrelationThreshold">
            <summary>
            Value RBDC_SetCorrelationThreshold : Set the correlation threshold to the specified value.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetCorrelationCounts_Retired">
            <summary>
            Value RBDC_GetCorrelationCounts_Retired : Get the correlation sample counts.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetCorrelationThreshold">
            <summary>
            Value RBDC_GetCorrelationThreshold : Get the current correlation threshold.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SaveCorrelationThresholdToRom">
            <summary>
            Value RBDC_SaveCorrelationThresholdToRom : Save the current correlation threshold to Flash ROM.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetStatisticsPyxibus">
            <summary>
             Value RBDC_GetStatisticsCommunication :  Get the Communication statistics.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetStatisticsRfid">
            <summary>
            Value RBDC_GetStatisticsRfid : Get the RFID statistics.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetBridgeState">
            <summary>
            Value  RBDC_SetBridgeState : Enable/Disable half bridge and set duty cycles.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_ClearTagListBeforeTagScan">
            <summary>
            RBDC_ClearTagListBeforeTagScan : Clear the tag list for the next tag scan.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_TagPhaseTest">
            <summary>
            Value RBDC_TagPhaseTest : Do a tag-phase test.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetTagResponseSignal">
            <summary>
            Value RBDC_GetTagResponseSignal : Return the tag response signal A/D values.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetCarrierSignal">
            <summary>
            Value RBDC_GetCarrierSignal : Return the carrier voltage and current A/D values.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetDeviceSerialNumber">
            <summary>
            Value RBDC_SetDeviceSerialNumber : Change the device serial number in ROM; must reset device to use new number.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetDeadBand">
            <summary>
            Value RBDC_SetDeadBand : Change the dead-band for the PWM transitions.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetDeviceSerialNumber">
            <summary>
            Value RBDC_GetDeviceSerialNumber : Read the device serial number from ROM.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetHalfBridgeDutyCycle_Retired">
            <summary>
            Value RBDC_GetHalfBridgeDutyCycle_Retired : Retired: Get half bridge duty cycle; replaced with RBDC_GetBridgeState.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SaveBridgeDutyCyclesToRom">
            <summary>
            Value RBDC_SaveBridgeDutyCyclesToRom : Save the full- and half-bridge duty cycles to ROM.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetCorrelationCounts">
            <summary>
            Value RBDC_GetCorrelationCounts : Get correlation counts from a correlation sample session.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetAntennaPolarityAndPower">
            <summary>
            Value  RBDC_SetAntennaPolarityAndPower : For Tag Tester; sets antenna polarity and selects 12V power supply.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetBridgeState">
            <summary>
            Value RBDC_GetBridgeState :  Get half/full bridge state and duty cycles.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_StartTagCharacterization">
            <summary>
            Value RBDC_StartTagCharacterization : Collect phase shift information at specified duty cycle.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetTagCharacterizationResults">
            <summary>
            Value RBDC_GetTagCharacterizationResults  :  Get results of RBDC_StartTagCharacterization.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetAntennaOn">
            <summary>
            Value RBDC_SetAntennaOn : Set power on antenna
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SendSynchronization">
            <summary>
            Value RBDC_SendSynchronization : Send synchronization command
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SendLowLevelOrder">
            <summary>
            Value RBDC_SendLowLevelOrder : Send  low level  basic command
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetSynchronisationTime">
            <summary>
            Value RBDC_SetSynchronisationTime : send a synchronistation
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetTagUidDigit">
            <summary>
            value RBDC_SetTagUidDigit : Load uid digit to confirm
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SendUidConfirmation">
            <summary>
            Value  RBDC_SendUidConfirmation : Request confirmation of the loaded uid
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetModulationTime">
            <summary>
            value  RBDC_SetModulationTime : request for change modulation time
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetAckTime">
            <summary>
            value RBDC_SetAckTime : request for change aknowledge time
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SendSwitchCommand">
            <summary>
            Value RBDC_SendSwitchCommand : Send  command on RS485 for drive relay board
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetSupply12V">
            <summary>
            value RBDC_GetSupply12V : recover value of the 12V
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SampleCorrelationSimple">
            <summary>
            Value RBDC_SampleCorrelationSimple to sample for wit or wothout response
            </summary>             
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_StartConfirmation">
            <summary>
            value RBDC_StartConfirmation : begin uid confirmation process
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_EndConfirmation">
            <summary>
            value  RBDC_EndConfirmation : end uid confirmation process
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_ConfirmUID">
            <summary>
             value RBDC_ConfirmUID : Send confirmation of loaded digit
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_GetCarrierFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_IncreaseCarrierFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_DecreaseCarrierFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_FindGoodFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RfidCommandType.RBDC_SetAlarmInfraOn">
            <summary>
            Value   RBDC_SetAlarmInfaOn : Switch On/Off infra red sensor
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder">
            <summary>
            Enumeration for low order level
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.K0">
            <summary>
            Send KO order
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.K1">
            <summary>
            Send K1 order
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.K2">
            <summary>
            Send K2 order
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.K3">
            <summary>
            Send K3 order
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.K4">
            <summary>
            Send K4 order
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.K5">
            <summary>
            Send K5 order
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.K6">
            <summary>
            Send K6 order
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.K7">
            <summary>
            Send K7 order
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.KD">
            <summary>
            Send unlock order
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.KZ">
            <summary>
            Send Test of presence
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.KR">
            <summary>
            Send Go down index order
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.LowlevelBasicOrder.KB">
            <summary>
            Send blocks command
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.BackDoorEventType">
            <summary>
            Enumeration for BackDoor Info request.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.BackDoorEventType.BDET_None">
            <summary>
            None value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.BackDoorEventType.BDET_CorrelationSample">
            <summary>
            Report a single correlation sample.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.BackDoorEventType.BDET_CorrelationSamplesComplete">
            <summary>
             Report a series of correlation samples.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.BackDoorEventType.BDET_TagCharacterizationComplete">
            <summary>
            A tag characterization session has finished.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.BackDoorEventType.BDET_AxisChange">
            <summary>
            A change axis is notified
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.DoorStatusFlags">
            <summary>
            Enumeration Door State
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DoorStatusFlags.DSF_LedIsOn">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DoorStatusFlags.DSF_LedIsFlashing">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DoorStatusFlags.DSF_LedInLocalMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DoorStatusFlags.DSF_Unused">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DoorStatusFlags.DSF_LatchSolenoidEnergized">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DoorStatusFlags.DSF_DoorLocksWhenOpened">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DoorStatusFlags.DSF_DoorIsOpen">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DoorStatusFlags.DSF_DoorIsUnlocked">
            <summary>
            
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.KZTabClass">
            <summary>
            Class to retrieve KZ number need function of hardware
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.KZTabClass.KZValue">
            <summary>
            Dictionnary of KZ value versus hardware - value = nbaxe + 1;
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.TagIdType">
            <summary>
            Struct to define TagIDtype for confirmation
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.TagIdType.word">
            <summary>
            basic representation of a 20 digits uid
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.ResponseType">
            <summary>
            Class ResponseType : High level Class herited from Serial MessageType for display ResponseCodeType
            overide ToString()
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.SerialMessageType">
            <summary>
            Class SerialMessageType : Low level message class that define the varibles of a serial message
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.LENGTH_SerialMessageHeader">
            <summary>
            Variable int LENGTH_SerialMessageHeader : // Not including High level Message.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.byteCount">
            <summary>
            Variable byte byteCount : Length of message. This will vary depending on length of message in Message field.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.messageType">
            <summary>
            Variable byte messageType : Message type from MessageIdType enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.messageId">
            <summary>
            Variable uint messageId : Unique ID identifying this transaction; responses use the same messageID.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.deviceId">
            <summary>
            Variable uint deviceId : ID of device, if applicable.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.timeoutMSecs">
            <summary>
            Variable ushort timeoutMSecs : Maximum allowable device response time, if applicable.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.errorCode">
            <summary>
            Variable byte errorCode : Return error code, if applicable.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.deviceTypeMajor">
            <summary>
            Variable  byte deviceTypeMajor : Device type major, if applicable.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.deviceTypeMinor">
            <summary>
            Variable byte deviceTypeMinor : Device type minor, if applicable.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.spare1">
            <summary>
            Variable byte spare1 : Extra data depending on message type.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialMessageType.serialMessage">
            <summary>
            Variable byte[] serialMessage : Message packet.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.ResponseType.ToString">
            <summary>
            Overided method ToString
            </summary>
            <returns>The ResponseCodeType in a string format</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PBAE_RfidTagAdded">
            <summary>
            Class PBAE_RfidTagAdded : Data class for exchange Uid when CommandType.PBCMD_AsyncEvent is TagAdded.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidTagAdded.command">
            <summary>
            Variable ushort command : Message command. Must be CommandType.PBCMD_AsyncEvent.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidTagAdded.asyncEvent">
            <summary>
            Variable byte asyncEvent :  Should be PBET_TagAdded
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidTagAdded.serialNumber">
            <summary>
            Variable byte[] serialNumber : 60-bit Tag serial number, stored as big-endian.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PBAE_RfidTagRemoved">
            <summary>
            Class PBAE_PBAE_RfidTagRemoved : Data class for exchange Uid when CommandType.PBCMD_AsyncEvent is TagRemoved.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidTagRemoved.command">
            <summary>
            Variable ushort command : Message command. Must be CommandType.PBCMD_AsyncEvent.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidTagRemoved.asyncEvent">
            <summary>
            Variable byte asyncEvent :  Should be PBET_TagRemoved
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidTagRemoved.serialNumber">
            <summary>
            Variable byte[] serialNumber : 60-bit Tag serial number, stored as big-endian.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.AsyncEventMessage">
            <summary>
            Class  AsyncEventMessage herited from SerialMessageType to define asynchronous operation.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.AsyncEventMessage.ToString">
            <summary>
            Override function ToString() to display asynchronous event depending of the asynchronous message type.
            </summary>
            <returns>return a formated string function of the asynchronous operation</returns>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.AsyncEventMessage.asyncEventType">
            <summary>
            Property to Get the asyncEventType
            </summary>
            <value> return the asynchronous type of the message from enumeration AsyncEventType</value>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.BaseConverter">
            <summary>
            Class BaseConverter to pass from a data representation to another from base 2 to 36
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.BaseConverter.Convert(System.Int32,System.Int32,System.String)">
            <summary>
            Function Convert to Convert number in string representation from base:from to base:to
            </summary>
            <param name="from">source base of the number to convert (2 to 36)</param>
            <param name="to">Destination base for the number to convert (2 to 36)</param>
            <param name="s">Number to convert in a string format</param>
            <returns>A string of the converted number in base "to"</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.SerialRFID">
            <summary>
            Class SerialRFID to manipulate and convert a tag serial number
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.SerialRFID.SerialNumber(System.Byte[])">
            <summary>
            Function Serial number : Convert a serial number in byte array format to an int64.
            </summary>
            <param name="serialNumberBytes">Serial tag number in a  byte array </param>
            <returns>a Int64 of the tag serial number</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.SerialRFID.SerialNumberAsString(System.UInt64)">
            <summary>
            Function SerialNumberAsString : Convert the specified serial number into its octal value.
            </summary>
            <param name="serialNumber">The 60-bit serial number to display.</param>
            <returns>The octal string corresponding to the serial number.</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.SerialRFID.SerialNumberAsAlphaString(System.UInt64,SDK_SC_RfidReader.TagType)">
            <summary>
            Convert the specified serial number into its alphaValue value.
            </summary>
            <param name="serialNumber">The 60-bit serial number to display.</param>
            <returns>The alpha string corresponding to the serial number.</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.SerialRFID.ConvertTagDigitsTo64(SDK_SC_RfidReader.DeviceBase.TagIdType*,System.UInt32,System.Byte[])">
            <summary>
            Function to convert a uid from a byte[] to a tagdigit structure
            </summary>
            <param name="pSerialNumber">tagdigit to store result</param>
            <param name="digitCount">Number of digit to convert</param>
            <param name="TagDigits">array of byte of the uid</param>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.SerialException">
            <summary>
            Class SerialException herited from exception to define Exception process if occurs during communication
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.SerialException.errorCode">
            <summary>
            Variable  ResponseCodeType errorCode : Contain the error code of the exception
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.SerialException.#ctor(SDK_SC_RfidReader.DeviceBase.ResponseCodeType,System.String)">
            <summary>
            Constructor  of  SerialException class 
            </summary>
            <param name="errorCode">Contain the error code involved</param>
            <param name="exceptionDescription">Contain the description of the error</param>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.SerialException.ErrorCode">
            <summary>
            Property  ErrorCode to retrieve the error code value.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.Utilities">
            <summary>
            Class Utilities that contain general purpose useful function
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.Utilities.MarshalToStruct(System.Byte[],System.Type)">
            <summary>
            Function MarshalToStruct : Function that convert a byte array source to a spacifuc define type
            </summary>
            <param name="srcData"> A byte array of data to parse</param>
            <param name="resultType">The expected class in which this array should be convert</param>
            <returns> An object corresponding of the resultType containing the data parsed</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgRfidCommand">
            <summary>
            Class PbMsgRfidCommand use when  Request for PBCMD_BackDoor.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidCommand.SIZE">
            <summary>
            Variable const uint SIZE : Byte length of marshaled fields.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidCommand.command">
            <summary>
            Variable ushort command : Message command. CommandType.PBCMD_RfidCommand.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidCommand.rfidCommand">
            <summary>
            Variable byte rfidCommand : Should be one of RfidCommandType.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidCommand.param1">
            <summary>
            Variable byte param1 : General purpose parameter depending on backDoorCommand.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidCommand.param2">
            <summary>
            Variable UInt16 param2 : General purpose parameter depending on backDoorCommand.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidCommand.param3">
            <summary>
            Variables UInt16 param3 : General purpose parameter depending on backDoorCommand.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidCommand.#ctor(SDK_SC_RfidReader.DeviceBase.RfidCommandType,System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Constructor of PbMsgRfidCommand
            </summary>
            <param name="rfidCommand">One of the enumeration RfidCommandType</param>
            <param name="param1">A byte containing data depend on RfidCommandType </param>
            <param name="param2">A 16 bits integer containing data depend on RfidCommandType </param>
            <param name="param3">A 16 bits integer containing data depend on RfidCommandType</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidCommand.ToString">
            <summary>
            Override function ToString() to display PbMsgRfidCommand
            </summary>
            <returns>return a formated string </returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspRfidCommand">
            <summary>
            Class PbRspRfidCommand which define the response to PBCMD_RfidCommand.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidCommand.completionStatus">
            <summary>
            Variable byte completionStatus : ResponseCodeType.PBRC_SUCCESS if successful.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidCommand.responseByte1">
            <summary>
            Variable byte responseByte1 : Meaning varies based on rfidCommand in request.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidCommand.responseWord1">
            <summary>
             Variable byte responseWord1 : Meaning varies based on rfidCommand in request.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidCommand.responseLong1">
            <summary>
             Variable byte responseLon1 : Meaning varies based on rfidCommand in request.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbRspRfidCommand.ToString">
            <summary>
            Override function ToString() to display PbRspRfidCommand 
            </summary>
            <returns>return a formated string </returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.DeviceInfoType">
            <summary>
            Struct DeviceInfoType which contain the serial number and Description of the device
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceInfoType.deviceId">
            <summary>
            Variable UInt32 deviceId : The 32-bit device serial number.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceInfoType.description">
            <summary>
            Variable  DeviceDescriptionType : Struct to basic definition of the device
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.DeviceDescriptionType">
            <summary>
            Struct DeviceDescriptionType which contain the Device kind value and the sofware and hardware revision version
            </summary>        
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceDescriptionType.deviceTypeMajor">
            <summary>
            Variable byte deviceTypeMajor : DeviceTypeMajorType enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceDescriptionType.deviceTypeMinor">
            <summary>
            Variable byte deviceTypeMinor :  DeviceTypeMinorType enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceDescriptionType.softwareVersionMajor">
            <summary>
            Variable byte softwareVersionMajor : High number of software revision.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceDescriptionType.softwareVersionMinor">
            <summary>
            Variable softwareVersionMinor :  Low number of software revision
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceDescriptionType.hardwareVersionMajor">
            <summary>
            Variable byte hardwareVersionMajor :  High number of hardware revision.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceDescriptionType.hardwareVersionMinor">
            <summary>
            Variable byte hardwareVersionMinor :  Low number of hardware revision.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgGetHelloWorld">
            <summary>
            Class PbMsgGetHelloWorld : Request for PBCMD_HelloWorld.
            Variable class for discover new device function
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgGetHelloWorld.SIZE">
            <summary>
            Variable const uint SIZE : Byte length of marshaled fields.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgGetHelloWorld.command">
            <summary>
            Variable ushort command : Message command. Must be .CommandType.PBCMD_VersionNumber.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgGetHelloWorld.#ctor">
            <summary>
            Constructor of class PbMsgGetHelloWorld
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspGetHelloWorld">
            <summary>
            Class PbRspGetHelloWorld : Response to PBCMD_HelloWorld.
            Variable class for marshal response of PBCMD_HelloWorld.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspGetHelloWorld.completionStatus">
            <summary>
            Variable byte completionStatus : ResponseCodeType.PBRC_SUCCESS if successful.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspGetHelloWorld.DeviceInfo">
            <summary>
            Variable DeviceInfoType : Struct contains the software and hardware revision number
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbRspGetHelloWorld.ToString">
            <summary>
            Override function ToString() to display PbRspGetHelloWorld 
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PBAE_RfidScanStateChanged">
            <summary>        /// Class PBAE_RfidScanStateChanged : Class that contain result of the changed occurs during the last inventory
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidScanStateChanged.command">
            <summary>
            Variable ushort command : Message command. Must be CommandType.PBCMD_AsyncEvent.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidScanStateChanged.asyncEvent">
            <summary>
            Variable byte asyncEvent : Should be PBET_RfidScanStateChanged
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidScanStateChanged.scanStatus">
            <summary>
            Variable byte scanStatus : One of ScanStatusType.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidScanStateChanged.info">
            <summary>
            Variable byte info : Information depending on scanStatus.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_RfidScanStateChanged.tagFailureCount">
            <summary>
            Variable byte tagFailureCount : Number of tag failures detected. Retrieve with PBMCD_GetTagFailure.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgRequestTagScan">
            <summary>
            Class PbMsgRequestTagScan : Request for PBCMD_RequestTagCheck
            Standard variable class to request an inventory
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRequestTagScan.SIZE">
            <summary>
            Variable const uint SIZE : Byte length of marshaled fields.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRequestTagScan.command">
            <summary>
            Variable ushort command : message command. Must be CommandType.PBCMD_RequestTagCheck.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRequestTagScan.mode">
            <summary>
            byte mode : Bits from TagScanModeFlags enumeration.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRequestTagScan.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Method PbMsgRequestTagScan : Send command to start inventory to the board  with different mode.
            </summary>
            <param name="bClearTagListHasChangedFlag"> Set this bool for Clear stored list tag</param>
            <param name="bAsynchronousTagUpdates">Set this bool for received result inventory asynchronously during scan process</param>
            <param name="bUnlockTagAllAxis">Set this bool to unlock all tag on all axis prior to scan</param>
            <param name="bUseKR">Set This bool for perform inventory with KR during algo. </param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRequestTagScan.ToString">
            <summary>
            Override function ToString() to display PBCMD_RequestTagCheck
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspRequestTagScan">
            <summary>
            Class PbRspRequestTagScan : Response to PBCMD_RequestTagCheck.
            Variable class for marshal response of PBCMD_RequestTagCheck.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRequestTagScan.completionStatus">
            <summary>
            Variable byte completionStatus : ResponseCodeType.PBRC_SUCCESS if successful.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRequestTagScan.systemStatus">
            <summary>
            Variable : byte systemStatus : Flags from SystemStatusFlags enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRequestTagScan.doorStatus">
            <summary>
            Variable byte doorStatus :  Flags from DoorStatusFlags enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRequestTagScan.scanStatus">
            <summary>
            Variable byte scanStatus :  Flags from ScanStatusFlags enumeration.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbRspRequestTagScan.ToString">
            <summary>
            Override function ToString() to display PbRspRequestTagScan 
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetNextTag">
            <summary>
            Class PbMsgRfidGetNextTag :  Request for PBCMD_RequestNextTag.
            Class contain variable of retrieving the next stored tag in list
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetNextTag.SIZE">
            <summary>            
            Variable const uint SIZE : Byte length of marshaled fields.
            </summary>           
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetNextTag.command">
            <summary>
             Variable ushort command : message command. Must be CommandType.PBCMD_RequestNextTag.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetNextTag.bGetFirst">
            <summary>
            Variable bGetFirst :  True to start from the beginning of the list; false to return next unreported tag.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetNextTag.#ctor">
            <summary>
            Constructor of PbMsgRfidGetNextTag Class
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetNextTag.ToString">
            <summary>
            Override function ToString() to display PBCMD_RequestNextTag 
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetNextTag">
            <summary>
            Class PbRspRfidGetNextTag : Response to PBCMD_RequestNextTag.
            Variable class for marshal response of PBCMD_RequestNextTag.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetNextTag.completionStatus">
            <summary>
            Variable byte completionStatus : ResponseCodeType.PBRC_SUCCESS if successful.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetNextTag.systemStatus">
            <summary>
            Variable : byte systemStatus : Flags from SystemStatusFlags enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetNextTag.doorStatus">
            <summary>
             Variable byte doorStatus :  Flags from DoorStatusFlags enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetNextTag.scanStatus">
            <summary>
            Variable byte scanStatus :  Flags from ScanStatusFlags enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetNextTag.currentTagCount">
            <summary>
            Variable byte currentTagCount : The current count of detected tags.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetNextTag.tagIndex">
            <summary>
            Variable byte tagIndex : The index of the tag being returned.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetNextTag.tagInfo">
            <summary>
            Variable byte tagInfo : Flags from TagInfoFlags enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetNextTag.serialNumber">
            <summary>
            Variable byte[] serialNumber : 60-bit serial number, stored as big-endian.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetNextTag.ToString">
            <summary>
            Override function ToString() to display response of PBCMD_RequestNextTag 
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetTagFailure">
            <summary>
            Class PbMsgRfidGetTagFailure :  Request for PBMCD_GetTagFailure.
            Class contain variable of retrieving the failure of tag
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetTagFailure.SIZE">
            <summary>            
            Variable const uint SIZE : Byte length of marshaled fields.
            </summary>           
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetTagFailure.command">
            <summary>
            Variable ushort command  : Message command. Must be CommandType.PBMCD_GetTagFailure.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetTagFailure.failedTagIndex">
            <summary>
            Variable byte failedTagIndex : Index of tag failure entry to retrieve
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidGetTagFailure.#ctor(System.UInt32)">
            <summary>
            Constructor of class PbMsgRfidGetTagFailure
            </summary>
            <param name="failedTagIndex">uint that contain the index of the tag to proceed</param>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetTagFailure">
            <summary>
            Class PbRspRfidGetTagFailure : Response to PBMCD_GetTagFailure.
            Variable class for marshal response of PBMCD_GetTagFailure.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetTagFailure.completionStatus">
            <summary>
            Variable byte completionStatus : ResponseCodeType.PBRC_SUCCESS if successful.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetTagFailure.failedTagCount">
            <summary>
            Variable byte failedTagCount : Total number of tag failures in failure list.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetTagFailure.failureType">
            <summary>
            Variable  byte failureType : Describes what failed for this tag failure from TagFailureEnumType enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetTagFailure.digitsRead">
            <summary>
            Variable byte digitsRead : The number of serial number digits that were read before failure.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetTagFailure.checksumDigitsRead">
            <summary>
            Variable checksumDigitsRead : The number of checksum digits that were read before failure.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetTagFailure.digitSequence">
            <summary>
            Variable byte[] digitSequence : The successful digits of the serial number, stored as big-endian.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetTagFailure.checksumDigits">
            <summary>
            Variable byte[] checksumDigits :  The checksum digits that were successfully read.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbRspRfidGetTagFailure.ToString">
            <summary>
            Override function ToString() to display response of PBMCD_GetTagFailure 
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgGetStatus">
            <summary>
            Class  PbMsgGetStatus :  Request for  PBCMD_GetStatus.
            Class contain variable of retrieving the status of the board
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgGetStatus.SIZE">
            <summary>            
            Variable const uint SIZE : Byte length of marshaled fields.
            </summary>          
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgGetStatus.command">
            <summary>
             Variable ushort command  : Message command. Must be CommandType.PBCMD_GetStatus.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgGetStatus.#ctor">
            <summary>
            Constructor of class PbMsgGetStatus.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspGetStatus">
            <summary>
            Class PbRspGetStatus : Response to PBCMD_GetStatus.
            Variable class for marshal response of PBCMD_GetStatus.
            </summary>
            [StructLayout(LayoutKind.Sequential, Pack = 1)]
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspGetStatus.completionStatus">
            <summary>
            Variable byte completionStatus : ResponseCodeType.PBRC_SUCCESS if successful.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspGetStatus.systemStatus">
            <summary>
            Variable : byte systemStatus : Flags from SystemStatusFlags enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspGetStatus.doorStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspGetStatus.scanStatus">
            <summary>
            Variable byte scanStatus :  Flags from ScanStatusFlags enumeration.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbRspGetStatus.ToString">
            <summary>
            Override function ToString() to display response of PBCMD_GetStatus 
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgRfidControl">
            <summary>
            PbMsgRfidControl : request to PBCMD_Control.
            Variable class for marshal response of PBCMD_Control.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidControl.SIZE">
            <summary>            
            Variable const uint SIZE : Byte length of marshaled fields.
            </summary>          
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidControl.command">
            <summary>
             Variable ushort command  : Message command. Must be CommandType.PBCMD_Control.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidControl.modeControl">
            <summary>
            Variable  byte modeControl; Flags from ControlModeFlags enumeration.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidControl.rfidControl">
            <summary>
            Variable  byte rfidControl :Flags from ControlControlFlags enumeration.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidControl.#ctor(System.Boolean,System.Boolean)">
            <summary>
            constructor of PbMsgRfidControl
            </summary>
            <param name="bEnableStatsAsyncEvent"></param>
            <param name="bStopScan">bool to request stop scan</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidControl.ToString">
            <summary>
            Override function ToString() to display response of PBCMD_Control
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspRfidControl">
            <summary>
            Class PbRspGetStatus : Response to PBCMD_Control..
            Variable class for marshal response of PBCMD_Control..
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidControl.completionStatus">
            <summary>
            Variable byte completionStatus : ResponseCodeType.PBRC_SUCCESS if successful.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoor">
            <summary>
             PbMsgRfidBackDoor : request to PBCMD_BackDoor.
            Variable class for marshal response of PBCMD_BackDoor.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoor.SIZE">
            <summary>            
            Variable const uint SIZE : Byte length of marshaled fields.
            </summary>          
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoor.command">
            <summary>
            Variable command : Message command. Must be CommandType.PBCMD_BackDoor.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoor.backDoorCommand">
            <summary>
            Variable byte backDoorCommand : Should be one of RfidBackDoorCommandType.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoor.param1">
            <summary>
            Variable  byte param1 : General purpose parameter depending on backDoorCommand.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoor.param2">
            <summary>
            Variable  UInt16 param2 : General purpose parameter depending on backDoorCommand.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoor.param3">
            <summary>
            Variable  UInt16 param3 : General purpose parameter depending on backDoorCommand.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoor.#ctor(SDK_SC_RfidReader.DeviceBase.RfidCommandType,System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Constructor of PbMsgRfidBackDoor class
            </summary>
            <param name="backDoorCommand">backDoorCommand : Should be one of RfidBackDoorCommandType.</param>
            <param name="param1">General purpose parameter depending on backDoorCommand.</param>
            <param name="param2">General purpose parameter depending on backDoorCommand.</param>
            <param name="param3">General purpose parameter depending on backDoorCommand.</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoor.ToString">
            <summary>
            Override function ToString() to display message of PBCMD_BackDoor
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoor">
            <summary>
              /// Class PbRspGetStatus : Response to PBCMD_BackDoor.
            Variable class for marshal response of PBCMD_BackDoor
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoor.completionStatus">
            <summary>
            Variable byte completionStatus : ResponseCodeType.PBRC_SUCCESS if successful.
            </summary>         
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoor.responseByte1">
            <summary>
             byte responseByte1; :  Meaning varies based on backDoorCommand in request
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoor.responseWord1">
            <summary>
            UInt16 responseWord1 : Meaning varies based on backDoorCommand in request.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoor.responseLong1">
            <summary>
             UInt32 responseLong1; : Meaning varies based on backDoorCommand in request.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoor.ToString">
            <summary>
            Override function ToString() to display response of PBCMD_BackDoor
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PBAE_BackDoorInfo">
            <summary>
            Class for retreive backdoor info command
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_BackDoorInfo.command">
            <summary>
            Variable  command: Message command. Must be CommandType.PBCMD_AsyncEvent.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_BackDoorInfo.asyncEvent">
            <summary>
             Variable byte asyncEvent : Should be PBET_BackDoorInfo
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_BackDoorInfo.backDoorEventType">
            <summary>
            Varaible byte backDoorEventType :  Indicates which back door information is provided.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_BackDoorInfo.value1">
            <summary>
            Variable UInt16 value1 : Meaning varies based on backDoorCommand in request.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PBAE_BackDoorInfo.value2">
            <summary>
            Variable UInt16 value2 : Meaning varies based on backDoorCommand in request.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCorrelationCounts">
            <summary>
            Class for retrieve correlation sample series
            Response for PBCMD_BackDoor when backDoorCommand is RBDC_GetCorrelationCounts.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCorrelationCounts.completionStatus">
            <summary>
            Variable byte completionStatus : ResponseCodeType.PBRC_SUCCESS if successful.
            </summary> 
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCorrelationCounts.correlationOffset">
            <summary>
             byte correlationOffset :  The correlation corresponding to correlationCounts[0].
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCorrelationCounts.correlationCounts">
            <summary>
            UInt16[] correlationCounts :  16 counts of correlation values.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCorrelationCounts.ToString">
            <summary>
            Override function ToString() to display response of  RBDC_GetCorrelationCounts
            </summary>
            <returns>return a formated string of the results</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgDrawerUnlock">
            <summary>
            Class for Request an unlock door/drawer Unlock
            Request for PBCMD_DrawerUnlock.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgDrawerUnlock.SIZE">
            <summary>
            Size of field to marshal
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgDrawerUnlock.command">
            <summary>
             message command. Must be CommandType.PBCMD_DrawerUnlock.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgDrawerUnlock.doorChoice">
            <summary>
            Ushort to select door to unlock
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgDrawerUnlock.#ctor(System.UInt16)">
            <summary>
            Constructor of class PbMsgDrawerUnlock
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgDrawerLock">
            <summary>
            Class for Request a lock door/drawer Unlock
            Request for PBCMD_Unlock.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgDrawerLock.SIZE">
            <summary>
            total Size i=of the field byte to marshal
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgDrawerLock.command">
            <summary>
            message command. Must be CommandType.PBCMD_DrawerUnlock. 
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgDrawerLock.doorChoice">
            <summary>
            Ushort to select door to lock
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgDrawerLock.#ctor(System.UInt16)">
            <summary>
            Constructor of the class PbMsgDrawerLock
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.pbMsgSetLightDuty">
            <summary>
            Class for set the power of the light
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.pbMsgSetLightDuty.SIZE">
            <summary>
            Total size of the field to marshal
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.pbMsgSetLightDuty.command">
            <summary>
             Message command. Must be CommandType.PBCMD_DrawerSetLight.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.pbMsgSetLightDuty.duty">
            <summary>
            Variable Duty cycle for power - from 0 to 300
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.pbMsgSetLightDuty.#ctor(System.UInt16)">
            <summary>
            Constructor of the class
            </summary>
            <param name="duty">Power to set</param>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoorTagCharacterization">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoorTagCharacterization.SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoorTagCharacterization.#ctor(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dutyCycle"></param>
            <param name="maxSampleCount"></param>
            <param name="minPhaseLimit"></param>
            <param name="maxPhaseLimit"></param>
            <param name="bStopOnBadPhase"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbMsgRfidBackDoorTagCharacterization.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoorGetTagCharacterizationResults">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoorGetTagCharacterizationResults.completionStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoorGetTagCharacterizationResults.carrierVoltage">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoorGetTagCharacterizationResults.correlationOkCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoorGetTagCharacterizationResults.inPhaseCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoorGetTagCharacterizationResults.inPhaseAverage">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoorGetTagCharacterizationResults.outPhaseCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoorGetTagCharacterizationResults.outPhaseAverage">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackDoorGetTagCharacterizationResults.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCarrierSignal">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCarrierSignal.completionStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCarrierSignal.__retired__">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCarrierSignal.dutyCycle">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCarrierSignal.signalValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.PbRspRfidBackdoorGetCarrierSignal.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard">
            <summary>
            Class DeviceRfidBoard attach to the interface IDeviceRfidBoard
            This class contain variable and method for control a spacecode RFID board 
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.IDeviceRfidBoard">
            <summary>
            Interface of Class deviceRfidBoardClass
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IDeviceRfidBoard.ConnectBoard">
            <summary>
            Method to request the connection of the board to the serial port.
            </summary>
            <returns>true if succeed to connect</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IDeviceRfidBoard.DisconnectBoard">
            <summary>
            Method to request the disconnection of the board to the serial port.
            </summary>
            <returns>true if succeed to disconnect</returns>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IDeviceRfidBoard.DeviceId">
            <summary>
            Property to retrieve serial number of the device.
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IDeviceRfidBoard.IsConnected">
            <summary>
            Property to retrieve the connection status.
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IDeviceRfidBoard.FirmwareVersion">
            <summary>
            property to get software version
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.MAX_DutyCycle">
            <summary>
            Variable constant for limit maximum duty cycle value in the board.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.MIN_ValidPhaseShift">
            <summary>
            Variable constant to define minimum phase accepted during phase shift.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.MAX_ValidPhaseShift">
            <summary>
            Variable constant to define maximum phase accepted during phase shift.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.MIN_CorrelationThreshold">
            <summary>
            Variable constant to define lower limit of the threshold value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.MAX_CorrelationThreshold">
            <summary>
            Variable constant to define upper limit of the threshold value
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.deviceId">
            <summary>
            Variable uint which contain serial number of the device.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.bConnected">
            <summary>
            Variable bool if the board is connect 
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.deviceChannel">
            <summary>
            Variable IDeviceChannel that content the communication layer interface
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.showOutbound">
            <summary>
            Delegate method for display message that are send and receive through the communication layer
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.hardwareVersionMajor">
            <summary>
            Variable uint major value of the hardware version.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.hardwareVersionMinor">
            <summary>
            Variable uint minor value of the hardware version.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.softwareVersionMajor">
            <summary>
            Variable uint major value of the software version.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.softwareVersionMinor">
            <summary>
            Variable uint minor value of the software version.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.deviceTypeMajorType">
            <summary>
            Variable DeviceTypeMajorType
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.strSerialPortCom">
            <summary>
            Variable string contain the serial port used.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.#ctor(System.UInt32,System.String,SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.ShowMessageDelegate)">
            <summary>
            Constructor of DeviceRfidBoard
            </summary>
            <param name="deviceId">DeviceID is a dummy variable to recover device ID of the board </param>
            <param name="strSerialPortCom">String of the associated serial port plug to the device</param>
            <param name="showOutbound">Delegate for displaying message from serial port</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.ConnectBoard">
            <summary>
            Method to connect device to the serial port string pass in the constructor
            If the connection succeed recover all the parameter of the board.
            </summary>
            <returns>true is succed to connect, false otherwise</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.DisconnectBoard">
            <summary>
            Method to disconnect device from the seriap port
            </summary>
            <returns>return true id succeed false otherwise</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.marshalMessage(System.Object,System.Type)">
            <summary>
            Method for marshal a byte array to a response struct define in DefRfidClass
            </summary>
            <param name="message">Object struct to receive message </param>
            <param name="responseType">Type of message to marshal</param>
            <returns>The struc or class with variable filled with response array byte</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.rfidAction(SDK_SC_RfidReader.DeviceBase.RfidCommandType,System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Method for requestr a particular action from rfidCommandtype with responsetype not defined
            </summary>
            <param name="rfidCommand">The command to send</param>
            <param name="param1">General purpose param depending  of the request action</param>
            <param name="param2">General purpose param depending  of the request action</param>
            <param name="param3">General purpose param depending  of the request action</param>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.rfidAction(SDK_SC_RfidReader.DeviceBase.RfidCommandType,System.Type,System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Method for request a particular action from rfidCommandtype with responsetype defined
            </summary>
            <param name="rfidCommand">The command to send</param>
            <param name="responseType">Class type expected in return</param>
            <param name="param1">General purpose param depending  of the request action</param>
            <param name="param2">General purpose param depending  of the request action</param>
            <param name="param3">General purpose param depending  of the request action</param>
            <returns>Return struct or class of the requested command</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getHelloWorld">
            <summary>
            Method for request a board to discover and give it's parameter (serial number and version)
            </summary>
            <returns>a PbRspGetHelloWorld class with serial number and version filled</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.clearKnownTagsBeforeTagScan">
            <summary>
            Method for request clear the known tag list before the next tag scan. Only applies to one tag scan. 
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.setBridgeState(System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Method for set dutycycle value of full and half bridge and the mode of create the field
            </summary>
            <param name="bEnableHalfBridge">if set , board is in half bridge (low field mode)</param>
            <param name="fullBridgeDutyCycle">dutycycle value for the fullbridge mode</param>
            <param name="halfBridgeDutyCycle">dutycycle value for the halfbridge mode</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.control(System.Boolean,System.Boolean)">
            <summary>
            Method to request end scan
            </summary>
            <param name="bEnableStatsAsyncEvent">bool to enable async event</param>
            <param name="bStopScan">bool to request end scan</param>
            <returns>true if succeed</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.startTagScan(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Method for send an inventory request
            </summary>
            <param name="bClearTagListHasChangedFlag">if set, list of known tag is cleared</param>
            <param name="bAsynchronousTagUpdates">if set, tag are notify during scan asynchronously , if false the function getNextTag must be use for retrieve tag UID</param>
            <param name="bUnlockTagAllAxis">If set perform unlock all tag prior to scan</param>
            <param name="bUseKR">If set perform an inventory with KR</param>
            <returns>true if request succeed : Be careful the start of the invnetory will be notify asynchronously</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.characterizeTag(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dutyCycle"></param>
            <param name="sampleCount"></param>
            <param name="bStopOnBadPhase"></param>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getCharacterizeTagResults">
            <summary>
            Get the tag characterization data from a tag characterization session initiated
            with a call to characterizeTag().
            </summary>
            <returns>The tag characterization data</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.tagPresenceTest(System.Boolean,System.UInt32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="bStart"></param>
            <param name="sampleCount"></param>
            <param name="bGetPhaseShift"></param>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.enableCorrelationEvent(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bEnable"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getNextTag(System.Boolean,System.UInt64@,System.UInt32@,System.UInt32@)">
            <summary>
            Method to request next tag in list known tagin Stat Scan function
            </summary>
            <param name="bFirstTag">If set, the first tag is requested and put all the tag uin the list in no reported status</param>
            <param name="tagID">variable to store the uid retrieved</param>
            <param name="tagIndex">Index of the tag in the list</param>
            <param name="tagCount">number of tag in the list</param>
            <returns>true is succeed to request</returns>
            
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getFailedTag(System.UInt32,System.UInt64@,System.UInt32@,System.String@)">
            <summary>
            Method for request the failure of tag that have been report failed tag
            </summary>
            <param name="failedTagIndex">Index of tag to retreive</param>
            <param name="tagID">>variable to store the uid retrieved</param>
            <param name="serialDigitsRead">Number of digit read before failure</param>
            <param name="failureReason">The reason of the failure in string format</param>
            <returns>true is succeed</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.tagScanFailureReason">
            <summary>
            Method for format a scan failure reason
            </summary>
            <returns>The string of the failure of the non start scan</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getStatus">
            <summary>
            Method to request status of the board
            </summary>
            <returns>The class PbRspGetStatus with the info status filled</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getCorrelationThreshold">
            <summary>
            Method to request Threshold value
            </summary>
            <returns>value of the threshold - must be between 5 and 200</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getSupply12V">
            <summary>
            Method to retreive 12v value
            </summary>
            <returns>int of the batterie value from ADC</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.setCorrelationThreshold(System.Byte)">
            <summary>
            Method to set the threshold noise value
            </summary>
            <param name="threshold">value of the threshold -must be between 5 and 200</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.saveCorrelationThresholdToROM">
            <summary>
            Method to store threshold value in ROM
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.sampleCorrelationSeries(System.Boolean,System.UInt16)">
            <summary>
            Method to request a noise and tag answer aquisition
            </summary>
            <param name="bStartSampling">bool to start and stop sampling</param>
            <param name="sampleCount">Number of samples to obtain</param>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.sampleCorrelationSeriesSimple(System.Boolean,System.UInt16)">
            <summary>
            Method to request unique sample
            </summary>
            <param name="bNonResponseOnly">true if without response requested</param>
            <param name="sampleCount">number of sample</param>
            <returns>true is succeed to launch</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getCorrelationCounts(System.Boolean,System.UInt32,System.UInt32[])">
            <summary>
            Method to retrieve correlation samples
            </summary>
            <param name="bGetMissingCounts">bool to retreive correlation tag present or not </param>
            <param name="nonEmptyGroups"></param>
            <param name="counts">Values retrieved</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.sendSwitchCommand(System.Byte,System.Byte)">
            <summary>
            Method to control switch board through RS485.
            </summary>
            <param name="bSet">bool to set or clear the relay</param>
            <param name="RelaisNumber">byte number of the relais to drive  (1-8) ; 9 for all</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.LockDoor(System.Boolean)">
            <summary>
            Methos for lock/unlock the door/drawer
            </summary>
            <param name="bOnOff">is true send Lock otherwise send unlock command</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.LockDoor(SDK_SC_RfidReader.DeviceBase.DoorValue,System.Boolean)">
            <summary>
            Method to lock/Unlock the door
            </summary>
            <param name="door"> door to lock</param>
            <param name="bOnOff">lock or unlock</param>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.SetLightDuty(System.UInt16)">
            <summary>
            Method to set power of the light
            </summary>
            <param name="Duty">Power to set between 0 (off) and 300 max</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.setTagUidDigit(System.Byte,SDK_SC_RfidReader.DeviceBase.TagIdType)">
            <summary>
            Method to load uid code for confirmation
            </summary>
            <param name="blockNumber">1 for MSB, 2 for LSB</param>
            <param name="mySerial"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.startConfirmation">
            <summary>
            Function to start confirmation process
            </summary>
            <returns>true is succeed</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.endConfirmation">
            <summary>
            Function to end confirmation process
            </summary>
            <returns>true id succeed</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.confirmLoadedUID(System.Byte)">
            <summary>
            Function to send confirmation command of the loaded UID
            </summary>
            <param name="nbDigits">Number of digits to check</param>
            <returns>True is command succed - result will be notified through asynchronous operation</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.setInfraRedSensor(System.Boolean)">
            <summary>
            Set Infra red sensor On or Off
            </summary>
            <param name="bStart">Value to put on or off</param>
            <returns>true if succeed</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.setAntenna(System.Boolean)">
            <summary>
            Function to switch on/off the field
            </summary>
            <param name="bStart">true to on, false to stop</param>
            <returns>true if function succeed </returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.sendSyncPulse">
            <summary>
            Function to request a synchronisation
            </summary>
            <returns>true id succeed</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.sendCommand(System.Byte,System.UInt16@)">
            <summary>
            Function to send basic order
            </summary>
            <param name="theCmd">command to lanch</param>
            <param name="Rcor">N/A</param>
            <returns>true id command succeed</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.calibrate(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bStart"></param>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getCarrierSignal(System.UInt16,System.Boolean,System.Boolean,System.SByte[])">
            <summary>
            
            </summary>
            <param name="startingIndex"></param>
            <param name="lockSignal"></param>
            <param name="getVoltage"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getCorrelationCounts">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.setSerialNumber(System.String)">
            <summary>
            
            </summary>
            <param name="strSerialNumber"></param>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getSerialNumber">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.getBridgeState(System.Boolean@,System.UInt32@,System.UInt32@)">
            <summary>
            
            </summary>
            <param name="bEnableHalfBridge"></param>
            <param name="fullBridgeDutyCycle"></param>
            <param name="halfBridgeDutyCycle"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.saveBridgeDutyCyclesToROM">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.GetCarrierFrequency(System.UInt16@,System.UInt16@)">
            <summary>
            
            </summary>
            <param name="period"></param>
            <param name="Vant"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.FindGoodFrequency">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.IncreaseCarrierFrequency">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.DecreaseCarrierFrequency">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.FirmwareVersion">
            <summary>
            property to get software version
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.HardwareVersion">
            <summary>
            property to get software version
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.DeviceId">
            <summary>
            Property to retrieve serial number of the board
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.IsConnected">
            <summary>
            Property for retrieved  connection status.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard.ShowMessageDelegate">
            <summary>
            Delegate method for display message from communication channel
            </summary>
            <param name="device">the interface of the device from which the message come</param>
            <param name="message">The message to displayed</param>
            <param name="modifier">The modifier for parse message as come in or out or if it's a asynchronous message</param>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.EventThread">
            <summary>
            Class for delegaye asynchronous receive message.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.EventThread.deviceChannel">
            <summary>
            Variable of the deviceChannel that receive the asynchronous Event
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.EventThread.eventDelegate">
            <summary>
            Variable of the consumer event
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.EventThread.eventThread">
            <summary>
            Thread Variable 
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.EventThread.stop">
            <summary>
            bool for request end of the thread
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.EventThread.#ctor(SDK_SC_RfidReader.DeviceBase.IDeviceChannel,SDK_SC_RfidReader.DeviceBase.EventThread.ConsumeEventDelegate)">
            <summary>
            Constructo of the class
            </summary>
            <param name="deviceChannel">involved deviceChannel for the event thread</param>
            <param name="eventDelegate">Delegate of the methof send when message received</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.EventThread.eventThreadProc">
            <summary>
            Method of the thread to process asynchronous Message
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.EventThread.stopThread">
            <summary>
            Method to request end of the thread
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.EventThread.ConsumeEventDelegate">
            <summary>
            Delegate of the event consumer 
            </summary>
            <param name="asyncEventMessage">variable asyncEventMessage to process</param>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.IDeviceChannel">
            <summary>
            Interface for Rs232Channel class
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IDeviceChannel.OpenSerialPort(System.String,System.UInt32@)">
            <summary>
            Method for open the the serial port
            </summary>
            <param name="PortCom">serial port com number in string format "COM1"</param>
            <param name="serialnumber">serial number of the board</param>
            <returns>true if succeed</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IDeviceChannel.CloseSerialPort">
            <summary>
            Method to close the serial port
            </summary>
            <returns>true if succeed</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IDeviceChannel.sendMessageWaitResponse(System.UInt32,System.Byte[])">
            <summary>
            Method to send a specific message to a device.
            </summary>
            <param name="targetDevice">serial board number to which message will be send</param>
            <param name="messageContent">Message value in a byte array</param>
            <returns>the struct or class in relation of the request with filled data</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IDeviceChannel.sendMessageWaitResponse(System.String)">
            <summary>
            Send message for firmware mode
            </summary>
            <param name="message">message to send</param>
            <returns>string response</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IDeviceChannel.sendMessageExpectResponse(System.String,System.String)">
            <summary>
            Method to send message and test specific response
            </summary>
            <param name="message">message to send</param>
            <param name="expectedResponse">Response to test</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IDeviceChannel.waitNextAsyncEvent">
            <summary>
            delegate message for handle asynchronous message.
            </summary>
            <returns>the asynchronous message received</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.IDeviceChannel.cancelPendingOperations">
            <summary>
            Method to set event for terminate event thread loop.
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IDeviceChannel.TheDeviceId">
            <summary>
            Property to get and set serial number 
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.IDeviceChannel.ErrBoard">
            <summary>
            Property of the last erreor board
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.MyDebug">
            <summary>
            Class MyDebug : Debug class for display error message during exception
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.MyDebug.Assert(System.Boolean)">
            <summary>
            Method Assert : Check for condition
            </summary>
            <param name="bCondition">Condition to check</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.MyDebug.Assert(System.Boolean,System.String)">
            <summary>
             Method Assert : Check for condition and display message
            </summary>
            <param name="bCondition">Condition to check</param>
            <param name="failureMessage">Message to display</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.MyDebug.Fail(System.String)">
            <summary>
            Method Fail : Emits the error message
            </summary>
            <param name="failureMessage">Message to emits</param>
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.RS232Port">
            <summary>
            Base class for handling a communication through a RS232 port.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232Port.CHAR_StartOfFrame">
            <summary>
            Constant variable which define start char of the frame.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232Port.CHAR_EndOfFrame">
            <summary>
            Constant variable which define end char of the frame.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232Port.HelloWorld">
            <summary>
            String message to send to the board for requesting a helloworld
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232Port.serialPort">
            <summary>
            Variable of the serialport class
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232Port.inboundBuffer">
            <summary>
            Variable that accumulate data from reception buffer.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232Port.bHelloWorldProcess">
            <summary>
            Bool for process message from a helloworld Request
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232Port.strSerialNumber">
            <summary>
            String for storing the serial number of the board
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232Port.ReceiveEvent">
            <summary>
            Variable AutoResetEvent for notify message when helloworld request
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232Port.OnMessageReceived(System.String)">
            <summary>
            Method definition declare in RS232DeviceChannel Class
            Function to launch when a full message is available.
            </summary>
            <param name="message">String of the full message to process</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232Port.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232Port.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232Port.OpenSerialPort(System.String,System.UInt32@)">
            <summary>
            Method for open the serial port
            </summary>
            <param name="PortCom">String of the serial port to open "COMi"</param>
            <param name="serialnumber">Uint to store the serial number of the board</param>
            <returns>true if succeed, false otherwise</returns>     
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232Port.CloseSerialPort">
            <summary>
            Method to close the serial port
            </summary>
            <returns>true if succeed, false otherwise</returns>    
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232Port.HasValidCRC(System.String)">
            <summary>
            Calculate and verify CRC of incoming message
            </summary>
            <param name="message">Message to process</param>   
            <returns>1 if the message is valid 0 otherwise</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232Port.sendMessage(System.String)">
            <summary>
            Send a message on the communication channel
            </summary>
            <param name="message">Message to send</param>          
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232Port.OnDataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            Function to receive and parse incoming  message
            </summary>       
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232Port.OnErrorReceived(System.Object,System.IO.Ports.SerialErrorReceivedEventArgs)">
            <summary>
            Function to recovery the error
            </summary>       
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232Port.OnSerialPinChanged(System.Object,System.IO.Ports.SerialPinChangedEventArgs)">
            <summary>
            Method to notify event on the serial port.
            </summary>       
        </member>
        <member name="T:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel">
            <summary>
            Class RS232channel from base class RS232 with IDeviceChannel interface
            This class provide variable and high level method for communicate through an serial port
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.deviceTypeMajor">
            <summary>
            const DeviceTypeMajorType : Major type of the board
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.deviceTypeMinor">
            <summary>
            const DeviceTypeMinorType : Minor type of the board
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.theDeviceId">
            <summary>
            Variable uint theDeviceId  : the serial number of the board
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.completionEvent">
            <summary>
             AutoResetEvent completionEvent : event occurs when a completion message is received
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.asyncEventQueue">
            <summary>
            Queue byte[]  asyncEventQueue : contain the list of valid asynchronous message to process
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.asyncEventEvent">
            <summary>
            AutoResetEvent asyncEventEvent  : event occurs when an asynchronous message is received
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.inboundMessageQueue">
            <summary>
            Queue inboundMessageQueue : Contain list of message during discover process
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.inboundMessageEvent">
            <summary>
            AutoResetEvent inboundMessageEvent : event when message arrive during discover process
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.completionPacket">
            <summary>
            byte[] completionPacket : contain message receive during a completion response
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.cancelOps">
            <summary>
            bool cancelOps : if true launch event with message null to stop thread event loop
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.#ctor(System.UInt32)">
            <summary>
            Contructor of RS232DeviceChannel
            </summary>
            <param name="IdToGive">Dummy variable for discover process</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.OnMessageReceived(System.String)">
            <summary>
            Overide method RS232Port.OnMessageReceived(). This is called by the base class when a complete
            inbound message has been received.
            </summary>
            <param name="message">full message receive to sort and process</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.sendMessageWaitResponse(System.UInt32,System.Byte[])">
            <summary>
            Method to send a comman to the board and receive a completion
            </summary>
            <param name="targetDevice">serial number of the device</param>
            <param name="messageContent">Message to send</param>
            <returns>the class object in regards of the request expected response</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.sendMessageExpectResponse(System.String,System.String)">
            <summary>
            Send Message and check and expected response
            </summary>
            <param name="message">Message to send</param>
            <param name="expectedResponse">Response to test</param>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.sendMessageWaitResponse(System.String)">
            <summary>
            Function to return last frame in serial buffer reception queue
            </summary>
            <param name="message">message to send</param>
            <returns>Last frame receive</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.waitNextAsyncEvent">
             <summary>
             Method for receive asynchronous message
             This method blocks until an inbound asynchronous event is received or cancelPendingOperations()
            is called.
             </summary>
             <returns>a message in a serialMessage type class</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.cancelPendingOperations">
            <summary>
            Method to stop the asynchronous process
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.TheDeviceId">
            <summary>
            Property to retrieve or set the value of the serial number
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.DeviceBase.RS232DeviceChannel.ErrBoard">
            <summary>
            Property to get and set last error board
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.Door_Status">
            <summary>
            Enumeration of door statut
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.Door_Status.Door_Open">
            <summary>
            Value for open
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.Door_Status.Door_Close">
            <summary>
            value for close
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.Lock_Status">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.Lock_Status.Lock_Open">
            <summary>
            Value for open
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.Lock_Status.Lock_Close">
            <summary>
            value for close
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.ReaderData">
            <summary>
            This Class content all the variables used to store the result and status of a reader inventory.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.nbTagScan">
            <summary>
            Variable to stored number of tag in the last inventory
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.strListTag">
            <summary>
            List collection of tag in string format
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.RspScan">
            <summary>
             Variable of the status of the reader following RespScan enumeration
             RS_ScanSucceed = 0x00, Value RS_ScanSucceed if scan ending correctly
             RS_FailedToConnect = 0x01,  Value RS_FailedToConnect if no connection are valid or not connection are found
             RS_FailedToStartScan = 0x02, Value RS_FailedToStartScan occurs when bad voltage detect, on the board, board not ready,
             RS_FinishScanTimeOut = 0x03, Value RS_FinishScanTimeOut occurs when time to inventory is too long.
             RS_ErrorDuringScan = 0x04, Values  RS_ErrorReadUID occurs when a Tag present in the field send recursively a bad uid number
             This value mentionned that the scan cannot finish normally due to a tag error 
             RS_ReaderReady = 0x05,  /// Value to enable next reader action
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.FailureReason">
            <summary>
            String to  describe the reason of the last failure in case of failure notification. 
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.bFail">
            <summary>
            Bool to notify a failure.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.bScan">
            <summary>
            Bool to notify a scan in process.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.MaximumCorrelationWhithoutResponse">
            <summary>
            Byte to store maximum correlation when no tag answer - indicate max noise level.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.AverageCorrelationWhithoutResponse">
            <summary>
             Byte to store average correlation when no tag answer
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.MinimumCorrelationWithResponse">
            <summary>
            Byte to store minimum correlation with tag answer - indicate Min tag answer.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.Threshold">
            <summary>
            Byte to store Threshold value. This value must be between 5 and 200.
            The value  must be greater than MaximumCorrelationWhithoutResponse to not detect noise and below
            MinimumCorrelationWithResponse to assume to detect all the tag.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ReaderData.DeviceID">
            <summary>
            String to store Serial Number in String Format
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.rfidReaderArgs">
            <summary cref="T:SDK_SC_RfidReader.rfidReaderArgs">
            Class that define methods and variables to notify event of the rfid Reader.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.rfidReaderArgs.#ctor(System.String,SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify,System.String)">
            <summary>
            Constructor of rfidReaderArgs
            </summary>
            <param name="RNValue">Notification to launch</param>
            <param name="message">Message to displayed</param>
             <param name="serialNumber">SerialNumber of the  Board</param>
        </member>
        <member name="P:SDK_SC_RfidReader.rfidReaderArgs.SerialNumber">
            <summary>
            Property to retreive serial number
            </summary>
        </member>
        <member name="P:SDK_SC_RfidReader.rfidReaderArgs.Message">
            <summary>
            Property to retrieve message.
            </summary>
            <returns>a string of the message.</returns>
        </member>
        <member name="P:SDK_SC_RfidReader.rfidReaderArgs.RN_Value">
            <summary>
            Property to retrieve notification type
            </summary>
            <returns>The enumeration ReaderNotify</returns>
        </member>
        <member name="T:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify">
            <summary>
            Enumeration of possible notification
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_FailedToConnect">
            <summary>
            Notification value when connectReader method failed.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_Connected">
            <summary>
            Notification value when reader connected.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_Disconnected">
            <summary>
            Notification value when reader disconnected.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ScanStarted">
            <summary>
            Notification value when inventory started.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ScanCompleted">
            <summary>
            Notification value when inventory completed.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_TagAdded">
            <summary>
            Notification value when tag added.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_TagRemoved">
            <summary>
            Notification value when tag removed.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ReadTagCompleted">
            <summary>
            Notification value when read tag list completed.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ReaderNotReady">
            <summary>
            Notification value reader not ready.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ReaderFailToStartScan">
            <summary>
            Notification value when failed to start Scan.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ReaderScanTimeout">
            <summary>
            Notification when scan time overtake scan timeout value.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ErrorDuringScan">
            <summary>
            Notification when error during scan occurs.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_FirmwareMessage">
            <summary>
            Notification when firmware update.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ScanCancelByHost">
            <summary>
            Notify scan stop by request from the host.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ThresholdMaxNoise">
            <summary>
            Notify result of noise aquisition completed.
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_FailedToDisconnected">
            <summary>
            Notify failed to disconnect device
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_AlreadyDisconnected">
            <summary>
            Notify that reader alraedy disconnected
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_DiscoverPluggedDevicesCompleted">
            <summary>
            Notify When the search of plugged devices is completed
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_UsbCableUnplug">
            <summary>
            Notify that cable or plug is removed 
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_Power_OFF">
            <summary>
            Notify that power is OFF
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_Power_ON">
            <summary>
            Notify that power is ON
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_Door_Opened">
            <summary>
            Notification when door opened
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_Door_Closed">
            <summary>
            notification for door closed
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_Scan_Pourcent">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_FirmwareStarted">
            <summary>
            Notification flash started
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_FirmwareSuccedToFinish">
            <summary>
            Notification firlware flashe succeed to end
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_FirmwareFailedToFinish">
            <summary>
            Firmware flashed failed to end
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_FirmwareCorruptedHexFile">
            <summary>
            Firmware corrupted file
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ThreadScanFinish">
            <summary>
            Notification for debug and assume thread scan finish
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_ThreadScanJoin">
            <summary>
            Notification for debug and assume thread scan join the main thread
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_SerialPortPlugged">
            <summary>
            Notification for new usb serial port plug
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_IntrusionDetected">
            <summary>
            Notification for infra red event sensor
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_MovementDetected">
            <summary>
            Notification for movement/acceloremeter 
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_DoorOpenTooLong">
            <summary>
            Notification alarm door stay open after Timer
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.rfidReaderArgs.ReaderNotify.RN_TagPresenceDetected">
            <summary>
            Notification when tag Detected
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.ErrorBoard">
            <summary>
            Class to store last error message
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ErrorBoard.dt">
            <summary>
            Time of the error
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.ErrorBoard.message">
            <summary>
            Message of the error
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.StatusForm">
            <summary>
            Class debug reader to display a small form to dispalyu reader status
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.StatusForm.#ctor(SDK_SC_RfidReader.RfidReader)">
            <summary>
            Constructeur form debug reader
            </summary>
            <param name="rd">object reader to debug</param>
        </member>
        <member name="F:SDK_SC_RfidReader.StatusForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.StatusForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SDK_SC_RfidReader.StatusForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.USBWatcher">
            <summary>
            Class to notify event on USB for unplug cable action
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.USBWatcher.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.USBWatcher.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.USBWatcher.Start(System.Int32)">
            <summary>
            
            </summary>
            <param name="pollingInterval"></param>
        </member>
        <member name="E:SDK_SC_RfidReader.USBWatcher.DeviceEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.UtilsWindows.CalibrationGraphDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.CalibrationGraphDialog.#ctor(SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard)">
            <summary>
            
            </summary>
            <param name="deviceBoard"></param>
        </member>
        <member name="F:SDK_SC_RfidReader.UtilsWindows.CalibrationGraphDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.CalibrationGraphDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.CalibrationGraphDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.Correlation.CalculateFinalPhaseShiftAverage(System.Int32[])">
            <summary>
            Calculate the final phase shift average using only integer calculations. This is intended to be
            ported to firmware.
            </summary>
            <param name="signal">The array of signal samples.</param>
            <returns>The average of the final AverageItems samples.</returns>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.Correlation.GenerateSignal(System.Int32[],System.UInt32,System.Double)">
            <summary>
            Generate a sine wave.
            </summary>
            <param name="signal">Array to place reference signal values</param>
            <param name="startAngle">Phase of the first signal value</param>
            <param name="scale">The length of a period in signal values</param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.Correlation.GenerateReferenceSignal">
            <summary>
            Generate the reference signal used to calculate correlation values. This routine matches
            the reference signal generation in the firmware.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.UtilsWindows.ConversionsDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.ConversionsDialog.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:SDK_SC_RfidReader.UtilsWindows.ConversionsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.ConversionsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.ConversionsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.UtilsWindows.DoorAndLightDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.DoorAndLightDialog.#ctor(SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard)">
            <summary>
            
            </summary>
            <param name="deviceBoard"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.DoorAndLightDialog.handleAsyncEvent(SDK_SC_RfidReader.DeviceBase.AsyncEventMessage)">
            <summary>
            
            </summary>
            <param name="asyncEventMessage"></param>
        </member>
        <member name="F:SDK_SC_RfidReader.UtilsWindows.DoorAndLightDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.DoorAndLightDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.DoorAndLightDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.UtilsWindows.FindThresholdDialog">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.FindThresholdDialog.#ctor(SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard)">
            <summary>
            
            </summary>
            <param name="deviceBoard"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.FindThresholdDialog.ProcessData(SDK_SC_RfidReader.DeviceBase.PBAE_BackDoorInfo)">
            <summary>
            
            </summary>
            <param name="backDoorPacket"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.FindThresholdDialog.BestTickStep(System.UInt32,System.UInt32)">
            Calculate tick step size. This value is intended to provide nice spacing on the Y-Axis
            tick marks. The labeled values should also be nice intervals.
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.FindThresholdDialog.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:SDK_SC_RfidReader.UtilsWindows.FindThresholdDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.FindThresholdDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.FindThresholdDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SDK_SC_RfidReader.UtilsWindows.TagSetsDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.TagSetsDialog.#ctor(SDK_SC_RfidReader.DeviceBase.DeviceRfidBoard)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.TagSetsDialog.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.TagSetsDialog.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.TagSetsDialog.handleAsyncEvent(SDK_SC_RfidReader.DeviceBase.AsyncEventMessage)">
            <summary>
            
            </summary>
            <param name="asyncEventMessage"></param>
        </member>
        <member name="F:SDK_SC_RfidReader.UtilsWindows.TagSetsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.TagSetsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SDK_SC_RfidReader.UtilsWindows.TagSetsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
